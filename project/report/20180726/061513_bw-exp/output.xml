<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180726 06:18:37.621" generator="Rebot 3.0.2 (Python 2.7.10 on win32)">
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp" id="s1" name="Bw-Exp">
<kw type="setup" name="start">
<kw name="Stop Server" library="Doraemon">
<doc>Examples:</doc>
<arguments>
<arg>9011</arg>
<arg>8011</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.831" starttime="20180726 06:17:00.802"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/BWDataClear.sql</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.831" starttime="20180726 06:17:00.831"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/EXPDataClear.sql</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.832" starttime="20180726 06:17:00.831"></status>
</kw>
<kw name="ClearBW">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE bestwestern_adapter;DELETE FROM reservation_room_stay;DELETE FROM reservation_entity;DELETE FROM reservation_event;</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<msg timestamp="20180726 06:17:00.836" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180726 06:17:00.836" starttime="20180726 06:17:00.832"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:00.836" starttime="20180726 06:17:00.832"></status>
</kw>
<kw name="ClearEXP">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE expedia_endpoint;DELETE FROM reservation;DELETE FROM notify_task;DELETE FROM callback_task;</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<msg timestamp="20180726 06:17:00.839" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180726 06:17:00.839" starttime="20180726 06:17:00.837"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:00.839" starttime="20180726 06:17:00.836"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:00.840" starttime="20180726 06:17:00.801"></status>
</kw>
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking.txt" id="s1-s1" name="Expedia-BW-Booking">
<test id="s1-s1-t1" name="TC01.001">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:17:00.848" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180726 06:17:00.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:00.848" starttime="20180726 06:17:00.846"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.849" starttime="20180726 06:17:00.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.849" starttime="20180726 06:17:00.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:17:00.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180726 06:17:00.850" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:00.850" starttime="20180726 06:17:00.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:17:00.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180726 06:17:00.852" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:00.852" starttime="20180726 06:17:00.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.863" starttime="20180726 06:17:00.852"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.878" starttime="20180726 06:17:00.864"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:00.881" starttime="20180726 06:17:00.879"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:17:00.993" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.570000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:00.994" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:00.994" starttime="20180726 06:17:00.881"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:05.731" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.580000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:05.732" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01001"...</msg>
<status status="PASS" endtime="20180726 06:17:05.732" starttime="20180726 06:17:00.994"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:14.826" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.590000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:14.826" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:14.826" starttime="20180726 06:17:05.732"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:14.827" starttime="20180726 06:17:14.826"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:14.827" starttime="20180726 06:17:14.827"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:17:14.828" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180726 06:17:14.829" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:14.829" starttime="20180726 06:17:14.827"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:17:14.830" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180726 06:17:14.830" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:14.830" starttime="20180726 06:17:14.829"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:14.831" starttime="20180726 06:17:14.830"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:14.831" starttime="20180726 06:17:14.831"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01001&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:14.979" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:14.979" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.740000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:14.980" starttime="20180726 06:17:14.832"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:14.980" starttime="20180726 06:17:14.831"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:14.980" starttime="20180726 06:17:14.831"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:14.992" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:14.992" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.760000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:14.993" starttime="20180726 06:17:14.980"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:14.993" starttime="20180726 06:17:14.980"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:14.993" starttime="20180726 06:17:14.980"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:14.993" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:14.993" starttime="20180726 06:17:14.993"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:14.994" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:14.994" starttime="20180726 06:17:14.993"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:14.994" starttime="20180726 06:17:00.845"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:14.994" critical="yes" starttime="20180726 06:17:00.845"></status>
</test>
<test id="s1-s1-t2" name="TC01.002">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:17:15.002" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180726 06:17:15.003" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:15.003" starttime="20180726 06:17:15.000"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:15.003" starttime="20180726 06:17:15.003"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:15.003" starttime="20180726 06:17:15.003"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:17:15.004" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180726 06:17:15.005" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:15.005" starttime="20180726 06:17:15.003"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:17:15.006" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180726 06:17:15.006" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:15.006" starttime="20180726 06:17:15.005"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:15.014" starttime="20180726 06:17:15.006"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:15.025" starttime="20180726 06:17:15.016"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:15.028" starttime="20180726 06:17:15.026"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:17:15.080" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.820000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:15.080" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:15.080" starttime="20180726 06:17:15.028"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:20.715" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.830000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:20.715" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01002"...</msg>
<status status="PASS" endtime="20180726 06:17:20.716" starttime="20180726 06:17:15.081"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:23.840" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.830000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:23.841" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:23.841" starttime="20180726 06:17:20.716"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.841" starttime="20180726 06:17:23.841"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.842" starttime="20180726 06:17:23.842"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:17:23.843" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180726 06:17:23.844" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:23.844" starttime="20180726 06:17:23.842"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:17:23.845" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180726 06:17:23.845" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:23.845" starttime="20180726 06:17:23.844"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.846" starttime="20180726 06:17:23.845"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.846" starttime="20180726 06:17:23.846"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01002&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:23.873" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:23.873" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.860000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:23.873" starttime="20180726 06:17:23.847"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:23.873" starttime="20180726 06:17:23.846"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:23.873" starttime="20180726 06:17:23.846"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:23.886" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:23.886" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.870000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:23.886" starttime="20180726 06:17:23.874"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:23.886" starttime="20180726 06:17:23.874"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:23.886" starttime="20180726 06:17:23.874"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:23.886" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:23.887" starttime="20180726 06:17:23.886"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:23.887" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:23.887" starttime="20180726 06:17:23.887"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:23.887" starttime="20180726 06:17:15.000"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:23.887" critical="yes" starttime="20180726 06:17:14.999"></status>
</test>
<test id="s1-s1-t3" name="TC01.003">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:17:23.895" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180726 06:17:23.896" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:23.896" starttime="20180726 06:17:23.894"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.896" starttime="20180726 06:17:23.896"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.896" starttime="20180726 06:17:23.896"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:17:23.897" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180726 06:17:23.898" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:23.898" starttime="20180726 06:17:23.896"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:17:23.900" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180726 06:17:23.900" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:23.900" starttime="20180726 06:17:23.898"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.910" starttime="20180726 06:17:23.901"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.919" starttime="20180726 06:17:23.911"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:23.922" starttime="20180726 06:17:23.920"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:17:23.973" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.940000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:23.974" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:23.974" starttime="20180726 06:17:23.922"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:30.412" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.940000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:30.413" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01003"...</msg>
<status status="PASS" endtime="20180726 06:17:30.413" starttime="20180726 06:17:23.974"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:35.794" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.950000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:35.795" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:35.795" starttime="20180726 06:17:30.413"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.795" starttime="20180726 06:17:35.795"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.795" starttime="20180726 06:17:35.795"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:17:35.797" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180726 06:17:35.797" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:35.797" starttime="20180726 06:17:35.796"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:17:35.798" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180726 06:17:35.798" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:35.798" starttime="20180726 06:17:35.797"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.798" starttime="20180726 06:17:35.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.799" starttime="20180726 06:17:35.799"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01003&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:35.824" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:35.825" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.990000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:35.825" starttime="20180726 06:17:35.800"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:35.825" starttime="20180726 06:17:35.799"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:35.825" starttime="20180726 06:17:35.799"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:35.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:35.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.000000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:35.838" starttime="20180726 06:17:35.826"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:35.838" starttime="20180726 06:17:35.825"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:35.838" starttime="20180726 06:17:35.825"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:35.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:35.839" starttime="20180726 06:17:35.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:35.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:35.839" starttime="20180726 06:17:35.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:35.840" starttime="20180726 06:17:23.893"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:35.840" critical="yes" starttime="20180726 06:17:23.893"></status>
</test>
<test id="s1-s1-t4" name="TC01.004">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:17:35.848" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180726 06:17:35.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:35.848" starttime="20180726 06:17:35.846"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.849" starttime="20180726 06:17:35.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.849" starttime="20180726 06:17:35.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:17:35.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180726 06:17:35.850" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:35.850" starttime="20180726 06:17:35.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:17:35.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180726 06:17:35.852" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:35.852" starttime="20180726 06:17:35.851"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.861" starttime="20180726 06:17:35.852"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.870" starttime="20180726 06:17:35.862"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:35.873" starttime="20180726 06:17:35.871"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:17:35.917" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.050000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:35.918" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:35.918" starttime="20180726 06:17:35.873"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:40.299" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:40.300" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01004"...</msg>
<status status="PASS" endtime="20180726 06:17:40.300" starttime="20180726 06:17:35.918"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:44.830" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:44.830" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:44.830" starttime="20180726 06:17:40.300"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.831" starttime="20180726 06:17:44.830"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.831" starttime="20180726 06:17:44.831"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:17:44.832" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180726 06:17:44.832" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:44.832" starttime="20180726 06:17:44.831"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:17:44.834" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180726 06:17:44.834" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:44.834" starttime="20180726 06:17:44.833"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.834" starttime="20180726 06:17:44.834"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.834" starttime="20180726 06:17:44.834"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01004&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:44.861" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:44.861" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.100000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:44.861" starttime="20180726 06:17:44.835"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:44.861" starttime="20180726 06:17:44.835"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:44.861" starttime="20180726 06:17:44.835"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:44.874" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:44.874" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.120000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:44.875" starttime="20180726 06:17:44.862"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:44.875" starttime="20180726 06:17:44.861"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:44.875" starttime="20180726 06:17:44.861"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:44.875" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:44.875" starttime="20180726 06:17:44.875"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:44.876" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:44.876" starttime="20180726 06:17:44.876"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:44.876" starttime="20180726 06:17:35.846"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:44.876" critical="yes" starttime="20180726 06:17:35.845"></status>
</test>
<test id="s1-s1-t5" name="TC01.005">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:17:44.884" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180726 06:17:44.885" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:44.885" starttime="20180726 06:17:44.883"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.885" starttime="20180726 06:17:44.885"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.885" starttime="20180726 06:17:44.885"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:17:44.886" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180726 06:17:44.887" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:44.887" starttime="20180726 06:17:44.885"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:17:44.888" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180726 06:17:44.888" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:44.888" starttime="20180726 06:17:44.887"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.898" starttime="20180726 06:17:44.888"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.906" starttime="20180726 06:17:44.899"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:44.909" starttime="20180726 06:17:44.907"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:17:45.048" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.240000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:45.049" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:45.049" starttime="20180726 06:17:44.909"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:50.730" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.240000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:50.731" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01005"...</msg>
<status status="PASS" endtime="20180726 06:17:50.731" starttime="20180726 06:17:45.049"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:17:53.806" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.250000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:53.807" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:53.807" starttime="20180726 06:17:50.731"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.807" starttime="20180726 06:17:53.807"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.808" starttime="20180726 06:17:53.807"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:17:53.809" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180726 06:17:53.809" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:53.809" starttime="20180726 06:17:53.808"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:17:53.810" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180726 06:17:53.810" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:17:53.810" starttime="20180726 06:17:53.809"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.811" starttime="20180726 06:17:53.810"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.811" starttime="20180726 06:17:53.811"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01005&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:53.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:53.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.290000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:53.838" starttime="20180726 06:17:53.812"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:53.838" starttime="20180726 06:17:53.811"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:53.838" starttime="20180726 06:17:53.811"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:17:53.851" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:17:53.851" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.300000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:17:53.851" starttime="20180726 06:17:53.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:53.851" starttime="20180726 06:17:53.838"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:53.851" starttime="20180726 06:17:53.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:53.852" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:53.852" starttime="20180726 06:17:53.851"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:17:53.852" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:17:53.852" starttime="20180726 06:17:53.852"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:53.853" starttime="20180726 06:17:44.882"></status>
</kw>
<status status="PASS" endtime="20180726 06:17:53.853" critical="yes" starttime="20180726 06:17:44.882"></status>
</test>
<test id="s1-s1-t6" name="TC01.006">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:17:53.861" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180726 06:17:53.861" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:53.862" starttime="20180726 06:17:53.859"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.862" starttime="20180726 06:17:53.862"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.862" starttime="20180726 06:17:53.862"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:17:53.863" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180726 06:17:53.863" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:53.863" starttime="20180726 06:17:53.862"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:17:53.864" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180726 06:17:53.865" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:17:53.865" starttime="20180726 06:17:53.864"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.874" starttime="20180726 06:17:53.865"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.880" starttime="20180726 06:17:53.875"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:17:53.883" starttime="20180726 06:17:53.881"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:17:53.933" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.350000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:17:53.934" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:17:53.934" starttime="20180726 06:17:53.883"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:00.719" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.360000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:00.720" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01006"...</msg>
<status status="PASS" endtime="20180726 06:18:00.720" starttime="20180726 06:17:53.934"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:05.802" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.370000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:05.803" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:05.803" starttime="20180726 06:18:00.720"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.804" starttime="20180726 06:18:05.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.804" starttime="20180726 06:18:05.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:18:05.805" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180726 06:18:05.806" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:05.806" starttime="20180726 06:18:05.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:18:05.807" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180726 06:18:05.807" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:05.807" starttime="20180726 06:18:05.806"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.807" starttime="20180726 06:18:05.807"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.808" starttime="20180726 06:18:05.808"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01006&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:05.834" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:05.834" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.400000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:05.835" starttime="20180726 06:18:05.808"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:05.835" starttime="20180726 06:18:05.808"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:05.835" starttime="20180726 06:18:05.808"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:05.847" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:05.847" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.420000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:05.847" starttime="20180726 06:18:05.835"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:05.847" starttime="20180726 06:18:05.835"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:05.847" starttime="20180726 06:18:05.835"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:05.848" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:05.848" starttime="20180726 06:18:05.848"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:05.848" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:05.848" starttime="20180726 06:18:05.848"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:05.849" starttime="20180726 06:17:53.859"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:05.849" critical="yes" starttime="20180726 06:17:53.858"></status>
</test>
<test id="s1-s1-t7" name="TC01.007">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:18:05.857" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180726 06:18:05.857" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:05.857" starttime="20180726 06:18:05.855"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.858" starttime="20180726 06:18:05.857"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.858" starttime="20180726 06:18:05.858"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:18:05.859" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180726 06:18:05.859" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:05.859" starttime="20180726 06:18:05.858"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:18:05.860" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180726 06:18:05.860" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:05.860" starttime="20180726 06:18:05.859"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.871" starttime="20180726 06:18:05.861"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.884" starttime="20180726 06:18:05.872"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:05.889" starttime="20180726 06:18:05.885"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:18:05.940" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.490000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:05.940" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:05.940" starttime="20180726 06:18:05.889"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:10.322" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.500000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:10.323" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01007"...</msg>
<status status="PASS" endtime="20180726 06:18:10.323" starttime="20180726 06:18:05.941"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:14.802" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.500000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:14.803" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:14.803" starttime="20180726 06:18:10.323"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.803" starttime="20180726 06:18:14.803"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.804" starttime="20180726 06:18:14.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:18:14.805" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180726 06:18:14.805" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:14.805" starttime="20180726 06:18:14.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:18:14.806" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180726 06:18:14.806" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:14.807" starttime="20180726 06:18:14.805"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.807" starttime="20180726 06:18:14.807"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.807" starttime="20180726 06:18:14.807"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01007&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:14.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:14.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.540000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:14.838" starttime="20180726 06:18:14.808"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:14.838" starttime="20180726 06:18:14.808"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:14.838" starttime="20180726 06:18:14.807"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:14.852" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:14.852" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.550000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:14.852" starttime="20180726 06:18:14.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:14.852" starttime="20180726 06:18:14.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:14.852" starttime="20180726 06:18:14.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:14.853" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:14.853" starttime="20180726 06:18:14.853"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:14.853" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:14.853" starttime="20180726 06:18:14.853"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:14.854" starttime="20180726 06:18:05.855"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:14.854" critical="yes" starttime="20180726 06:18:05.854"></status>
</test>
<test id="s1-s1-t8" name="TC01.008">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:18:14.862" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180726 06:18:14.862" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:14.862" starttime="20180726 06:18:14.860"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.862" starttime="20180726 06:18:14.862"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.863" starttime="20180726 06:18:14.863"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:18:14.864" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180726 06:18:14.864" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:14.864" starttime="20180726 06:18:14.863"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:18:14.865" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180726 06:18:14.865" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:14.865" starttime="20180726 06:18:14.864"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.874" starttime="20180726 06:18:14.865"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.882" starttime="20180726 06:18:14.875"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:14.884" starttime="20180726 06:18:14.883"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:18:14.933" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.600000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:14.933" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:14.933" starttime="20180726 06:18:14.885"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:20.271" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.610000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:20.272" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01008"...</msg>
<status status="PASS" endtime="20180726 06:18:20.272" starttime="20180726 06:18:14.934"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:23.796" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.620000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:23.797" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:23.797" starttime="20180726 06:18:20.272"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.797" starttime="20180726 06:18:23.797"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.798" starttime="20180726 06:18:23.798"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:18:23.799" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180726 06:18:23.799" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:23.799" starttime="20180726 06:18:23.798"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:18:23.800" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180726 06:18:23.800" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:23.801" starttime="20180726 06:18:23.799"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.801" starttime="20180726 06:18:23.801"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.801" starttime="20180726 06:18:23.801"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01008&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:23.828" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:23.829" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.650000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:23.829" starttime="20180726 06:18:23.802"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:23.829" starttime="20180726 06:18:23.802"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:23.829" starttime="20180726 06:18:23.801"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:23.842" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:23.842" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.660000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:23.842" starttime="20180726 06:18:23.830"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:23.842" starttime="20180726 06:18:23.829"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:23.842" starttime="20180726 06:18:23.829"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:23.843" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:23.843" starttime="20180726 06:18:23.842"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:23.843" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:23.843" starttime="20180726 06:18:23.843"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:23.843" starttime="20180726 06:18:14.860"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:23.844" critical="yes" starttime="20180726 06:18:14.859"></status>
</test>
<test id="s1-s1-t9" name="TC01.009">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:18:23.852" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180726 06:18:23.852" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:23.852" starttime="20180726 06:18:23.850"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.852" starttime="20180726 06:18:23.852"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.853" starttime="20180726 06:18:23.852"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:18:23.854" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180726 06:18:23.854" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:23.854" starttime="20180726 06:18:23.853"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:18:23.855" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180726 06:18:23.855" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:23.855" starttime="20180726 06:18:23.854"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.864" starttime="20180726 06:18:23.855"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.882" starttime="20180726 06:18:23.865"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:23.885" starttime="20180726 06:18:23.884"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:18:23.915" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.710000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:23.916" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:23.916" starttime="20180726 06:18:23.886"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:30.705" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.720000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:30.706" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01009"...</msg>
<status status="PASS" endtime="20180726 06:18:30.706" starttime="20180726 06:18:23.916"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:35.785" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.730000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:35.786" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:35.786" starttime="20180726 06:18:30.706"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.787" starttime="20180726 06:18:35.786"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.787" starttime="20180726 06:18:35.787"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:18:35.788" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180726 06:18:35.788" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:35.788" starttime="20180726 06:18:35.787"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:18:35.789" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180726 06:18:35.790" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:35.790" starttime="20180726 06:18:35.788"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.790" starttime="20180726 06:18:35.790"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.790" starttime="20180726 06:18:35.790"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01009&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:35.815" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:35.815" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.750000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:35.816" starttime="20180726 06:18:35.791"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:35.816" starttime="20180726 06:18:35.791"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:35.816" starttime="20180726 06:18:35.790"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:35.828" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:35.829" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.770000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:35.829" starttime="20180726 06:18:35.816"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:35.829" starttime="20180726 06:18:35.816"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:35.829" starttime="20180726 06:18:35.816"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:35.829" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:35.829" starttime="20180726 06:18:35.829"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:35.830" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:35.830" starttime="20180726 06:18:35.829"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:35.830" starttime="20180726 06:18:23.849"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:35.830" critical="yes" starttime="20180726 06:18:23.849"></status>
</test>
<test id="s1-s1-t10" name="TC01.010.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:18:35.838" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180726 06:18:35.839" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:35.839" starttime="20180726 06:18:35.837"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.839" starttime="20180726 06:18:35.839"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.839" starttime="20180726 06:18:35.839"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:18:35.840" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180726 06:18:35.840" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:35.840" starttime="20180726 06:18:35.839"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:18:35.842" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180726 06:18:35.842" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:35.842" starttime="20180726 06:18:35.841"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.850" starttime="20180726 06:18:35.842"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.858" starttime="20180726 06:18:35.851"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:35.860" starttime="20180726 06:18:35.859"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:18:35.928" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.840000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:35.928" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:35.928" starttime="20180726 06:18:35.860"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:40.711" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.840000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:40.712" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010P...</msg>
<status status="PASS" endtime="20180726 06:18:40.712" starttime="20180726 06:18:35.929"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:44.840" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.850000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:44.840" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:44.840" starttime="20180726 06:18:40.712"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.841" starttime="20180726 06:18:44.840"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.841" starttime="20180726 06:18:44.841"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:18:44.842" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180726 06:18:44.843" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:44.843" starttime="20180726 06:18:44.841"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:18:44.844" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180726 06:18:44.844" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:44.844" starttime="20180726 06:18:44.843"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.844" starttime="20180726 06:18:44.844"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.845" starttime="20180726 06:18:44.844"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:44.870" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:44.871" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.880000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:44.871" starttime="20180726 06:18:44.845"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:44.871" starttime="20180726 06:18:44.845"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:44.871" starttime="20180726 06:18:44.845"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:44.883" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:44.883" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.890000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:44.883" starttime="20180726 06:18:44.872"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:44.883" starttime="20180726 06:18:44.871"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:44.883" starttime="20180726 06:18:44.871"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:44.884" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:44.884" starttime="20180726 06:18:44.883"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:44.884" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:44.884" starttime="20180726 06:18:44.884"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:44.885" starttime="20180726 06:18:35.836"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:44.885" critical="yes" starttime="20180726 06:18:35.836"></status>
</test>
<test id="s1-s1-t11" name="TC01.010">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:18:44.893" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180726 06:18:44.893" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:44.893" starttime="20180726 06:18:44.891"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.893" starttime="20180726 06:18:44.893"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.894" starttime="20180726 06:18:44.893"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:18:44.895" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180726 06:18:44.895" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:44.895" starttime="20180726 06:18:44.894"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:18:44.896" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180726 06:18:44.896" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:44.896" starttime="20180726 06:18:44.895"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.907" starttime="20180726 06:18:44.897"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.915" starttime="20180726 06:18:44.908"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:44.918" starttime="20180726 06:18:44.916"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:18:44.980" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.950000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:44.980" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:44.980" starttime="20180726 06:18:44.918"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:50.717" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.970000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:50.718" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010M...</msg>
<status status="PASS" endtime="20180726 06:18:50.718" starttime="20180726 06:18:44.981"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:18:53.842" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.970000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:53.843" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:53.843" starttime="20180726 06:18:50.718"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.843" starttime="20180726 06:18:53.843"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.844" starttime="20180726 06:18:53.843"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:18:53.845" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180726 06:18:53.845" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:53.845" starttime="20180726 06:18:53.844"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:18:53.846" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180726 06:18:53.846" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:18:53.846" starttime="20180726 06:18:53.845"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.847" starttime="20180726 06:18:53.846"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.847" starttime="20180726 06:18:53.847"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010MOD..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:53.873" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:53.873" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.000000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:53.873" starttime="20180726 06:18:53.848"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:53.873" starttime="20180726 06:18:53.847"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:53.873" starttime="20180726 06:18:53.847"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:18:53.886" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:18:53.886" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.010000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:18:53.886" starttime="20180726 06:18:53.874"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:53.886" starttime="20180726 06:18:53.874"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:53.886" starttime="20180726 06:18:53.874"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:53.887" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:53.887" starttime="20180726 06:18:53.886"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:18:53.887" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:18:53.887" starttime="20180726 06:18:53.887"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:53.887" starttime="20180726 06:18:44.890"></status>
</kw>
<status status="PASS" endtime="20180726 06:18:53.888" critical="yes" starttime="20180726 06:18:44.890"></status>
</test>
<test id="s1-s1-t12" name="TC01.011.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:18:53.896" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180726 06:18:53.896" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:53.896" starttime="20180726 06:18:53.894"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.896" starttime="20180726 06:18:53.896"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.897" starttime="20180726 06:18:53.896"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:18:53.898" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180726 06:18:53.898" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:53.898" starttime="20180726 06:18:53.897"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:18:53.899" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180726 06:18:53.899" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:18:53.899" starttime="20180726 06:18:53.898"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.908" starttime="20180726 06:18:53.899"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.916" starttime="20180726 06:18:53.909"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:18:53.919" starttime="20180726 06:18:53.917"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:18:53.992" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.080000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:18:53.992" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:18:53.992" starttime="20180726 06:18:53.919"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:00.728" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.090000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:00.728" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01011P...</msg>
<status status="PASS" endtime="20180726 06:19:00.729" starttime="20180726 06:18:53.993"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:05.810" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.100000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:05.811" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:05.811" starttime="20180726 06:19:00.729"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.811" starttime="20180726 06:19:05.811"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.811" starttime="20180726 06:19:05.811"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:19:05.813" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180726 06:19:05.813" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:05.813" starttime="20180726 06:19:05.812"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:19:05.814" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180726 06:19:05.814" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:05.814" starttime="20180726 06:19:05.813"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.814" starttime="20180726 06:19:05.814"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.815" starttime="20180726 06:19:05.815"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:05.842" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:05.842" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.140000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:05.842" starttime="20180726 06:19:05.815"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:05.842" starttime="20180726 06:19:05.815"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:05.842" starttime="20180726 06:19:05.815"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:05.854" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:05.855" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.150000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:05.855" starttime="20180726 06:19:05.843"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:05.855" starttime="20180726 06:19:05.843"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:05.855" starttime="20180726 06:19:05.842"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:05.855" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:19:05.855" starttime="20180726 06:19:05.855"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:05.856" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:19:05.856" starttime="20180726 06:19:05.856"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:05.856" starttime="20180726 06:18:53.893"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:05.856" critical="yes" starttime="20180726 06:18:53.893"></status>
</test>
<test id="s1-s1-t13" name="TC01.011">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:19:05.864" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180726 06:19:05.865" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:05.865" starttime="20180726 06:19:05.863"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.865" starttime="20180726 06:19:05.865"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.865" starttime="20180726 06:19:05.865"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:19:05.866" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180726 06:19:05.867" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180726 06:19:05.867" starttime="20180726 06:19:05.865"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:19:05.868" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180726 06:19:05.868" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:05.868" starttime="20180726 06:19:05.867"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.877" starttime="20180726 06:19:05.868"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.890" starttime="20180726 06:19:05.878"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:05.893" starttime="20180726 06:19:05.891"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:19:05.941" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.200000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:05.942" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:05.942" starttime="20180726 06:19:05.893"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:10.374" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.200000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:10.374" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180726 06:19:10.375" starttime="20180726 06:19:05.942"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:15.305" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.210000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:15.305" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:15.305" starttime="20180726 06:19:10.375"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.306" starttime="20180726 06:19:15.306"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.307" starttime="20180726 06:19:15.306"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:19:15.309" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180726 06:19:15.309" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180726 06:19:15.309" starttime="20180726 06:19:15.307"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:19:15.312" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180726 06:19:15.312" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:15.312" starttime="20180726 06:19:15.310"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.313" starttime="20180726 06:19:15.312"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.313" starttime="20180726 06:19:15.313"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:15.317" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.317" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.317" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.318" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.334" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:15.334" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.240000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:15.334" starttime="20180726 06:19:15.314"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:15.334" starttime="20180726 06:19:15.314"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:15.338" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.338" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.338" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.338" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.338" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.338" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:15.375" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:15.376" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.280000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:15.376" starttime="20180726 06:19:15.335"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:15.376" starttime="20180726 06:19:15.334"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:15.376" starttime="20180726 06:19:15.313"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:15.399" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:15.399" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.310000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:15.399" starttime="20180726 06:19:15.377"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:15.399" starttime="20180726 06:19:15.377"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:15.399" starttime="20180726 06:19:15.376"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:15.400" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180726 06:19:15.400" starttime="20180726 06:19:15.400"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:15.401" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180726 06:19:15.401" starttime="20180726 06:19:15.401"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:15.401" starttime="20180726 06:19:05.862"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:15.402" critical="yes" starttime="20180726 06:19:05.862"></status>
</test>
<test id="s1-s1-t14" name="TC01.012.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:19:15.412" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180726 06:19:15.412" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:15.413" starttime="20180726 06:19:15.409"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.413" starttime="20180726 06:19:15.413"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.414" starttime="20180726 06:19:15.413"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:19:15.416" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180726 06:19:15.416" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:15.416" starttime="20180726 06:19:15.414"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:19:15.418" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180726 06:19:15.419" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:15.419" starttime="20180726 06:19:15.416"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.431" starttime="20180726 06:19:15.419"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.447" starttime="20180726 06:19:15.432"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:15.450" starttime="20180726 06:19:15.448"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:19:15.509" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.360000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:15.510" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:15.510" starttime="20180726 06:19:15.450"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:20.700" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.370000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:20.701" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01012P...</msg>
<status status="PASS" endtime="20180726 06:19:20.701" starttime="20180726 06:19:15.510"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:23.825" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.370000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:23.825" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:23.825" starttime="20180726 06:19:20.701"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.826" starttime="20180726 06:19:23.826"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.826" starttime="20180726 06:19:23.826"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:19:23.827" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180726 06:19:23.828" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:23.828" starttime="20180726 06:19:23.826"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:19:23.829" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180726 06:19:23.829" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:23.829" starttime="20180726 06:19:23.828"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.830" starttime="20180726 06:19:23.830"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.830" starttime="20180726 06:19:23.830"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:23.856" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:23.856" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.400000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:23.857" starttime="20180726 06:19:23.831"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:23.857" starttime="20180726 06:19:23.831"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:23.857" starttime="20180726 06:19:23.831"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:23.869" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:23.869" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.410000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:23.870" starttime="20180726 06:19:23.857"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:23.870" starttime="20180726 06:19:23.857"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:23.870" starttime="20180726 06:19:23.857"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:23.870" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:19:23.870" starttime="20180726 06:19:23.870"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:23.871" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:19:23.871" starttime="20180726 06:19:23.870"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:23.871" starttime="20180726 06:19:15.408"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:23.871" critical="yes" starttime="20180726 06:19:15.407"></status>
</test>
<test id="s1-s1-t15" name="TC01.012">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:19:23.879" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180726 06:19:23.879" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:23.879" starttime="20180726 06:19:23.877"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.880" starttime="20180726 06:19:23.879"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.880" starttime="20180726 06:19:23.880"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:19:23.881" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180726 06:19:23.881" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180726 06:19:23.881" starttime="20180726 06:19:23.880"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:19:23.882" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180726 06:19:23.882" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:23.882" starttime="20180726 06:19:23.881"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.891" starttime="20180726 06:19:23.883"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.906" starttime="20180726 06:19:23.892"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:23.912" starttime="20180726 06:19:23.907"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:19:24.020" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.490000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:24.020" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:24.021" starttime="20180726 06:19:23.912"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:30.264" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.500000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:30.265" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180726 06:19:30.265" starttime="20180726 06:19:24.021"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:35.798" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.510000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:35.798" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:35.798" starttime="20180726 06:19:30.265"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.799" starttime="20180726 06:19:35.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.799" starttime="20180726 06:19:35.799"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:19:35.800" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180726 06:19:35.801" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180726 06:19:35.801" starttime="20180726 06:19:35.799"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:19:35.802" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180726 06:19:35.802" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:35.802" starttime="20180726 06:19:35.801"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.802" starttime="20180726 06:19:35.802"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.803" starttime="20180726 06:19:35.802"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:35.805" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.805" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.805" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.805" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.817" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:35.817" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.530000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:35.817" starttime="20180726 06:19:35.803"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:35.817" starttime="20180726 06:19:35.803"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:35.819" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.819" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.819" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.819" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.819" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.819" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:35.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:35.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.550000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:35.838" starttime="20180726 06:19:35.817"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:35.838" starttime="20180726 06:19:35.817"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:35.838" starttime="20180726 06:19:35.803"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:35.851" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:35.851" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.560000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:35.851" starttime="20180726 06:19:35.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:35.851" starttime="20180726 06:19:35.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:35.851" starttime="20180726 06:19:35.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:35.852" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180726 06:19:35.852" starttime="20180726 06:19:35.851"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:35.852" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180726 06:19:35.852" starttime="20180726 06:19:35.852"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:35.852" starttime="20180726 06:19:23.877"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:35.852" critical="yes" starttime="20180726 06:19:23.876"></status>
</test>
<test id="s1-s1-t16" name="TC01.013.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:19:35.860" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180726 06:19:35.861" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:35.861" starttime="20180726 06:19:35.859"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.861" starttime="20180726 06:19:35.861"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.861" starttime="20180726 06:19:35.861"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:19:35.862" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180726 06:19:35.863" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:35.863" starttime="20180726 06:19:35.861"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:19:35.864" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180726 06:19:35.864" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:35.864" starttime="20180726 06:19:35.863"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.872" starttime="20180726 06:19:35.864"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.881" starttime="20180726 06:19:35.874"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:35.884" starttime="20180726 06:19:35.882"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:19:35.937" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.610000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:35.938" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:35.938" starttime="20180726 06:19:35.884"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:40.716" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.620000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:40.716" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01013P...</msg>
<status status="PASS" endtime="20180726 06:19:40.717" starttime="20180726 06:19:35.938"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:44.794" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.630000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:44.794" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:44.795" starttime="20180726 06:19:40.717"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.795" starttime="20180726 06:19:44.795"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.795" starttime="20180726 06:19:44.795"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:19:44.797" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180726 06:19:44.797" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:44.797" starttime="20180726 06:19:44.796"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:19:44.798" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180726 06:19:44.798" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:44.798" starttime="20180726 06:19:44.797"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.799" starttime="20180726 06:19:44.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.799" starttime="20180726 06:19:44.799"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:44.825" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:44.825" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.660000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:44.825" starttime="20180726 06:19:44.800"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:44.825" starttime="20180726 06:19:44.799"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:44.826" starttime="20180726 06:19:44.799"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:44.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:44.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.670000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:44.838" starttime="20180726 06:19:44.826"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:44.838" starttime="20180726 06:19:44.826"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:44.838" starttime="20180726 06:19:44.826"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:44.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:19:44.839" starttime="20180726 06:19:44.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:44.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:19:44.839" starttime="20180726 06:19:44.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:44.839" starttime="20180726 06:19:35.858"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:44.840" critical="yes" starttime="20180726 06:19:35.858"></status>
</test>
<test id="s1-s1-t17" name="TC01.013">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:19:44.848" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180726 06:19:44.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:44.848" starttime="20180726 06:19:44.846"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.848" starttime="20180726 06:19:44.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.849" starttime="20180726 06:19:44.848"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:19:44.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180726 06:19:44.850" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180726 06:19:44.850" starttime="20180726 06:19:44.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:19:44.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180726 06:19:44.851" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:44.851" starttime="20180726 06:19:44.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.862" starttime="20180726 06:19:44.851"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.877" starttime="20180726 06:19:44.864"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:44.885" starttime="20180726 06:19:44.878"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:19:44.925" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.740000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:44.926" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:44.926" starttime="20180726 06:19:44.885"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:50.762" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.740000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:50.762" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180726 06:19:50.763" starttime="20180726 06:19:44.926"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:19:53.786" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.750000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:53.787" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:53.787" starttime="20180726 06:19:50.763"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.787" starttime="20180726 06:19:53.787"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.788" starttime="20180726 06:19:53.788"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:19:53.789" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180726 06:19:53.789" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180726 06:19:53.789" starttime="20180726 06:19:53.788"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:19:53.790" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180726 06:19:53.790" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:19:53.790" starttime="20180726 06:19:53.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.791" starttime="20180726 06:19:53.791"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.791" starttime="20180726 06:19:53.791"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:53.794" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.794" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.794" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.794" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.804" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:53.804" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.770000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:53.804" starttime="20180726 06:19:53.792"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:53.804" starttime="20180726 06:19:53.792"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:53.806" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.806" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.806" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.806" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.806" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.807" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180726 06:19:53.825" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:53.825" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.790000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:53.826" starttime="20180726 06:19:53.805"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:53.826" starttime="20180726 06:19:53.804"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:53.826" starttime="20180726 06:19:53.791"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:19:53.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:19:53.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.800000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:19:53.838" starttime="20180726 06:19:53.826"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:53.838" starttime="20180726 06:19:53.826"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:53.838" starttime="20180726 06:19:53.826"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:53.839" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180726 06:19:53.839" starttime="20180726 06:19:53.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:19:53.839" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180726 06:19:53.839" starttime="20180726 06:19:53.839"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:53.839" starttime="20180726 06:19:44.845"></status>
</kw>
<status status="PASS" endtime="20180726 06:19:53.840" critical="yes" starttime="20180726 06:19:44.845"></status>
</test>
<test id="s1-s1-t18" name="TC01.031.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:19:53.848" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180726 06:19:53.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:53.848" starttime="20180726 06:19:53.846"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.848" starttime="20180726 06:19:53.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.849" starttime="20180726 06:19:53.848"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:19:53.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180726 06:19:53.850" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:53.850" starttime="20180726 06:19:53.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:19:53.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180726 06:19:53.851" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:19:53.851" starttime="20180726 06:19:53.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.860" starttime="20180726 06:19:53.851"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.870" starttime="20180726 06:19:53.861"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:19:53.872" starttime="20180726 06:19:53.871"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:19:53.948" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.880000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:19:53.948" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:19:53.948" starttime="20180726 06:19:53.872"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:20:00.687" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.880000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:20:00.688" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01031P...</msg>
<status status="PASS" endtime="20180726 06:20:00.688" starttime="20180726 06:19:53.949"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:20:05.819" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.890000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:20:05.819" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:20:05.819" starttime="20180726 06:20:00.688"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.820" starttime="20180726 06:20:05.820"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.820" starttime="20180726 06:20:05.820"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:20:05.821" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180726 06:20:05.822" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:20:05.822" starttime="20180726 06:20:05.820"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:20:05.823" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180726 06:20:05.823" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:20:05.823" starttime="20180726 06:20:05.822"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.823" starttime="20180726 06:20:05.823"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.824" starttime="20180726 06:20:05.823"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01031PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:20:05.849" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:20:05.849" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.920000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:20:05.849" starttime="20180726 06:20:05.824"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:05.849" starttime="20180726 06:20:05.824"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:05.850" starttime="20180726 06:20:05.824"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:20:05.862" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:20:05.862" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.930000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:20:05.862" starttime="20180726 06:20:05.850"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:05.863" starttime="20180726 06:20:05.850"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:05.863" starttime="20180726 06:20:05.850"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:20:05.863" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:20:05.863" starttime="20180726 06:20:05.863"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:20:05.864" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:20:05.864" starttime="20180726 06:20:05.863"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:05.864" starttime="20180726 06:19:53.845"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:05.864" critical="yes" starttime="20180726 06:19:53.845"></status>
</test>
<test id="s1-s1-t19" name="TC01.031">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_CancelRS[@TimeStamp]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180726 06:20:05.872" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180726 06:20:05.872" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRQ1-EXPcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:20:05.872" starttime="20180726 06:20:05.870"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.873" starttime="20180726 06:20:05.873"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.873" starttime="20180726 06:20:05.873"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180726 06:20:05.874" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180726 06:20:05.874" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-BWcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180726 06:20:05.874" starttime="20180726 06:20:05.873"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180726 06:20:05.875" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180726 06:20:05.876" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180726 06:20:05.876" starttime="20180726 06:20:05.874"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.884" starttime="20180726 06:20:05.876"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.892" starttime="20180726 06:20:05.886"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:05.897" starttime="20180726 06:20:05.893"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180726 06:20:05.918" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.970000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:20:05.919" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:20:05.919" starttime="20180726 06:20:05.897"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180726 06:20:10.702" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.980000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:20:10.703" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180726 06:20:10.703" starttime="20180726 06:20:05.919"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180726 06:20:14.830" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.980000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180726 06:20:14.831" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180726 06:20:14.831" starttime="20180726 06:20:10.703"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:14.832" starttime="20180726 06:20:14.831"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:14.832" starttime="20180726 06:20:14.832"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180726 06:20:14.833" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180726 06:20:14.833" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:20:14.833" starttime="20180726 06:20:14.832"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180726 06:20:14.834" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180726 06:20:14.835" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml']</msg>
<status status="PASS" endtime="20180726 06:20:14.835" starttime="20180726 06:20:14.834"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:14.835" starttime="20180726 06:20:14.835"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180726 06:20:14.835" starttime="20180726 06:20:14.835"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:20:14.849" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:20:14.849" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.010000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:20:14.849" starttime="20180726 06:20:14.836"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:14.849" starttime="20180726 06:20:14.836"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:14.849" starttime="20180726 06:20:14.835"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180726 06:20:14.862" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180726 06:20:14.862" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.020000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180726 06:20:14.862" starttime="20180726 06:20:14.850"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:14.862" starttime="20180726 06:20:14.850"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:14.862" starttime="20180726 06:20:14.849"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:20:14.863" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:20:14.863" starttime="20180726 06:20:14.863"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180726 06:20:14.863" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180726 06:20:14.864" starttime="20180726 06:20:14.863"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:14.864" starttime="20180726 06:20:05.870"></status>
</kw>
<status status="PASS" endtime="20180726 06:20:14.864" critical="yes" starttime="20180726 06:20:05.869"></status>
</test>
<status status="PASS" endtime="20180726 06:20:14.871" starttime="20180726 06:17:00.840"></status>
</suite>
<status status="PASS" endtime="20180726 06:20:14.877" starttime="20180726 06:17:00.485"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="19">Critical Tests</stat>
<stat fail="0" pass="19">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="Bw-Exp" pass="19">Bw-Exp</stat>
<stat fail="0" id="s1-s1" name="Expedia-BW-Booking" pass="19">Bw-Exp.Expedia-BW-Booking</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
