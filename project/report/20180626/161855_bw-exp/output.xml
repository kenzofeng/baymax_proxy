<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180626 16:22:45.808" generator="Rebot 3.0.2 (Python 2.7.10 on win32)">
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp" id="s1" name="Bw-Exp">
<kw type="setup" name="start">
<kw name="Stop Server" library="Doraemon">
<doc>Examples:</doc>
<arguments>
<arg>9011</arg>
<arg>8011</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.546" starttime="20180626 08:20:10.516"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/BWDataClear.sql</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.546" starttime="20180626 08:20:10.546"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/EXPDataClear.sql</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.547" starttime="20180626 08:20:10.547"></status>
</kw>
<kw name="ClearBW">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE bestwestern_adapter;DELETE FROM reservation_room_stay;DELETE FROM reservation_entity;DELETE FROM reservation_event;</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<msg timestamp="20180626 08:20:10.551" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180626 08:20:10.551" starttime="20180626 08:20:10.547"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:10.551" starttime="20180626 08:20:10.547"></status>
</kw>
<kw name="ClearEXP">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE expedia_endpoint;DELETE FROM reservation;DELETE FROM notify_task;DELETE FROM callback_task;</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<msg timestamp="20180626 08:20:10.554" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180626 08:20:10.554" starttime="20180626 08:20:10.552"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:10.554" starttime="20180626 08:20:10.551"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:10.554" starttime="20180626 08:20:10.515"></status>
</kw>
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking.txt" id="s1-s1" name="Expedia-BW-Booking">
<test id="s1-s1-t1" name="TC01.001">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:20:10.562" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180626 08:20:10.562" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:10.562" starttime="20180626 08:20:10.561"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.563" starttime="20180626 08:20:10.562"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.563" starttime="20180626 08:20:10.563"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:20:10.564" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180626 08:20:10.564" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:10.564" starttime="20180626 08:20:10.563"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:20:10.565" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180626 08:20:10.566" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:10.566" starttime="20180626 08:20:10.565"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.577" starttime="20180626 08:20:10.566"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.583" starttime="20180626 08:20:10.578"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:10.585" starttime="20180626 08:20:10.584"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:20:10.649" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.530000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:10.650" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:10.650" starttime="20180626 08:20:10.585"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:17.541" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.540000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:17.541" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01001"...</msg>
<status status="PASS" endtime="20180626 08:20:17.541" starttime="20180626 08:20:10.650"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:22.320" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.550000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:22.321" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:22.321" starttime="20180626 08:20:17.542"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.321" starttime="20180626 08:20:22.321"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.322" starttime="20180626 08:20:22.321"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:20:22.323" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180626 08:20:22.323" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:22.323" starttime="20180626 08:20:22.322"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:20:22.324" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180626 08:20:22.325" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:22.325" starttime="20180626 08:20:22.323"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.325" starttime="20180626 08:20:22.325"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.325" starttime="20180626 08:20:22.325"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01001&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:22.470" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:22.470" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.690000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:22.470" starttime="20180626 08:20:22.326"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:22.471" starttime="20180626 08:20:22.326"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:22.471" starttime="20180626 08:20:22.326"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:22.483" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:22.483" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.700000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:22.484" starttime="20180626 08:20:22.471"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:22.484" starttime="20180626 08:20:22.471"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:22.484" starttime="20180626 08:20:22.471"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:22.484" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:22.484" starttime="20180626 08:20:22.484"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:22.485" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:22.485" starttime="20180626 08:20:22.484"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:22.485" starttime="20180626 08:20:10.560"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:22.485" critical="yes" starttime="20180626 08:20:10.560"></status>
</test>
<test id="s1-s1-t2" name="TC01.002">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:20:22.493" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180626 08:20:22.493" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:22.493" starttime="20180626 08:20:22.491"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.493" starttime="20180626 08:20:22.493"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.494" starttime="20180626 08:20:22.494"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:20:22.495" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180626 08:20:22.495" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:22.495" starttime="20180626 08:20:22.494"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:20:22.496" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180626 08:20:22.497" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:22.497" starttime="20180626 08:20:22.495"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.506" starttime="20180626 08:20:22.497"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.521" starttime="20180626 08:20:22.507"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:22.524" starttime="20180626 08:20:22.522"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:20:22.628" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.810000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:22.629" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:22.629" starttime="20180626 08:20:22.524"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:27.558" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.810000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:27.558" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01002"...</msg>
<status status="PASS" endtime="20180626 08:20:27.558" starttime="20180626 08:20:22.630"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:31.284" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.820000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:31.284" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:31.284" starttime="20180626 08:20:27.559"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.285" starttime="20180626 08:20:31.284"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.285" starttime="20180626 08:20:31.285"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:20:31.286" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180626 08:20:31.287" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:31.287" starttime="20180626 08:20:31.285"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:20:31.288" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180626 08:20:31.288" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:31.288" starttime="20180626 08:20:31.287"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.288" starttime="20180626 08:20:31.288"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.289" starttime="20180626 08:20:31.289"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01002&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:31.315" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:31.315" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.850000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:31.315" starttime="20180626 08:20:31.290"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:31.315" starttime="20180626 08:20:31.289"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:31.316" starttime="20180626 08:20:31.289"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:31.327" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:31.327" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.860000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:31.328" starttime="20180626 08:20:31.316"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:31.328" starttime="20180626 08:20:31.316"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:31.328" starttime="20180626 08:20:31.316"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:31.328" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:31.328" starttime="20180626 08:20:31.328"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:31.329" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:31.329" starttime="20180626 08:20:31.328"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:31.329" starttime="20180626 08:20:22.491"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:31.329" critical="yes" starttime="20180626 08:20:22.490"></status>
</test>
<test id="s1-s1-t3" name="TC01.003">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:20:31.336" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180626 08:20:31.336" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:31.337" starttime="20180626 08:20:31.335"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.337" starttime="20180626 08:20:31.337"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.337" starttime="20180626 08:20:31.337"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:20:31.338" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180626 08:20:31.338" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:31.338" starttime="20180626 08:20:31.337"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:20:31.339" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180626 08:20:31.340" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:31.340" starttime="20180626 08:20:31.339"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.348" starttime="20180626 08:20:31.340"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.355" starttime="20180626 08:20:31.349"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:31.362" starttime="20180626 08:20:31.356"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:20:31.425" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.930000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:31.426" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:31.426" starttime="20180626 08:20:31.362"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:38.009" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.930000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:38.010" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01003"...</msg>
<status status="PASS" endtime="20180626 08:20:38.010" starttime="20180626 08:20:31.426"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:43.292" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.940000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:43.292" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:43.292" starttime="20180626 08:20:38.010"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.293" starttime="20180626 08:20:43.293"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.293" starttime="20180626 08:20:43.293"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:20:43.294" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180626 08:20:43.295" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:43.295" starttime="20180626 08:20:43.293"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:20:43.296" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180626 08:20:43.296" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:43.296" starttime="20180626 08:20:43.295"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.296" starttime="20180626 08:20:43.296"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.297" starttime="20180626 08:20:43.296"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01003&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:43.323" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:43.323" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.970000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:43.323" starttime="20180626 08:20:43.297"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:43.323" starttime="20180626 08:20:43.297"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:43.323" starttime="20180626 08:20:43.297"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:43.335" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:43.336" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.990000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:43.336" starttime="20180626 08:20:43.324"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:43.336" starttime="20180626 08:20:43.324"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:43.336" starttime="20180626 08:20:43.323"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:43.336" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:43.336" starttime="20180626 08:20:43.336"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:43.337" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:43.337" starttime="20180626 08:20:43.336"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:43.337" starttime="20180626 08:20:31.335"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:43.337" critical="yes" starttime="20180626 08:20:31.334"></status>
</test>
<test id="s1-s1-t4" name="TC01.004">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:20:43.345" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180626 08:20:43.345" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:43.345" starttime="20180626 08:20:43.344"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.345" starttime="20180626 08:20:43.345"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.345" starttime="20180626 08:20:43.345"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:20:43.346" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180626 08:20:43.347" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:43.347" starttime="20180626 08:20:43.346"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:20:43.348" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180626 08:20:43.348" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:43.348" starttime="20180626 08:20:43.347"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.357" starttime="20180626 08:20:43.348"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.370" starttime="20180626 08:20:43.358"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:43.381" starttime="20180626 08:20:43.371"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:20:43.445" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:43.446" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:43.446" starttime="20180626 08:20:43.382"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:47.731" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:47.732" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01004"...</msg>
<status status="PASS" endtime="20180626 08:20:47.732" starttime="20180626 08:20:43.446"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:52.312" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.070000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:52.312" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:52.312" starttime="20180626 08:20:47.732"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.313" starttime="20180626 08:20:52.312"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.313" starttime="20180626 08:20:52.313"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:20:52.314" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180626 08:20:52.314" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:52.314" starttime="20180626 08:20:52.313"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:20:52.316" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180626 08:20:52.316" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:20:52.316" starttime="20180626 08:20:52.315"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.316" starttime="20180626 08:20:52.316"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.316" starttime="20180626 08:20:52.316"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01004&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:52.342" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:52.342" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.090000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:52.342" starttime="20180626 08:20:52.317"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:52.342" starttime="20180626 08:20:52.317"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:52.342" starttime="20180626 08:20:52.317"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:20:52.354" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:20:52.354" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.100000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:20:52.355" starttime="20180626 08:20:52.343"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:52.355" starttime="20180626 08:20:52.343"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:52.355" starttime="20180626 08:20:52.342"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:52.355" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:52.355" starttime="20180626 08:20:52.355"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:20:52.356" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:20:52.356" starttime="20180626 08:20:52.355"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:52.356" starttime="20180626 08:20:43.343"></status>
</kw>
<status status="PASS" endtime="20180626 08:20:52.356" critical="yes" starttime="20180626 08:20:43.342"></status>
</test>
<test id="s1-s1-t5" name="TC01.005">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:20:52.363" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180626 08:20:52.363" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:52.364" starttime="20180626 08:20:52.362"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.364" starttime="20180626 08:20:52.364"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.364" starttime="20180626 08:20:52.364"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:20:52.365" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180626 08:20:52.365" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:52.365" starttime="20180626 08:20:52.364"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:20:52.366" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180626 08:20:52.367" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:20:52.367" starttime="20180626 08:20:52.366"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.375" starttime="20180626 08:20:52.367"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.382" starttime="20180626 08:20:52.376"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:20:52.390" starttime="20180626 08:20:52.383"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:20:52.435" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.180000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:52.436" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:20:52.436" starttime="20180626 08:20:52.390"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:20:57.967" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.180000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:20:57.968" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01005"...</msg>
<status status="PASS" endtime="20180626 08:20:57.968" starttime="20180626 08:20:52.436"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:01.294" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.190000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:01.294" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:01.294" starttime="20180626 08:20:57.968"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.295" starttime="20180626 08:21:01.294"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.295" starttime="20180626 08:21:01.295"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:21:01.296" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180626 08:21:01.296" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:01.296" starttime="20180626 08:21:01.295"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:21:01.297" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180626 08:21:01.298" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:01.298" starttime="20180626 08:21:01.297"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.298" starttime="20180626 08:21:01.298"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.298" starttime="20180626 08:21:01.298"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01005&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:01.324" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:01.324" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.220000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:01.324" starttime="20180626 08:21:01.299"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:01.324" starttime="20180626 08:21:01.299"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:01.324" starttime="20180626 08:21:01.298"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:01.336" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:01.336" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.230000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:01.337" starttime="20180626 08:21:01.325"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:01.337" starttime="20180626 08:21:01.325"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:01.337" starttime="20180626 08:21:01.324"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:01.337" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:01.337" starttime="20180626 08:21:01.337"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:01.338" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:01.338" starttime="20180626 08:21:01.337"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:01.338" starttime="20180626 08:20:52.362"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:01.338" critical="yes" starttime="20180626 08:20:52.361"></status>
</test>
<test id="s1-s1-t6" name="TC01.006">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:21:01.345" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180626 08:21:01.346" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:01.346" starttime="20180626 08:21:01.344"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.346" starttime="20180626 08:21:01.346"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.346" starttime="20180626 08:21:01.346"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:21:01.347" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180626 08:21:01.348" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:01.348" starttime="20180626 08:21:01.346"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:21:01.349" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180626 08:21:01.349" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:01.349" starttime="20180626 08:21:01.348"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.357" starttime="20180626 08:21:01.349"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.365" starttime="20180626 08:21:01.358"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:01.367" starttime="20180626 08:21:01.366"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:21:01.496" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.350000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:01.496" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:01.496" starttime="20180626 08:21:01.367"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:07.989" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.350000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:07.990" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01006"...</msg>
<status status="PASS" endtime="20180626 08:21:07.990" starttime="20180626 08:21:01.497"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:13.321" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.360000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:13.322" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:13.322" starttime="20180626 08:21:07.990"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.323" starttime="20180626 08:21:13.323"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.323" starttime="20180626 08:21:13.323"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:21:13.324" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180626 08:21:13.325" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:13.325" starttime="20180626 08:21:13.323"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:21:13.326" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180626 08:21:13.326" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:13.326" starttime="20180626 08:21:13.325"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.326" starttime="20180626 08:21:13.326"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.327" starttime="20180626 08:21:13.327"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01006&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:13.353" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:13.353" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.390000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:13.353" starttime="20180626 08:21:13.327"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:13.353" starttime="20180626 08:21:13.327"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:13.353" starttime="20180626 08:21:13.327"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:13.365" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:13.366" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.410000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:13.366" starttime="20180626 08:21:13.354"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:13.366" starttime="20180626 08:21:13.353"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:13.366" starttime="20180626 08:21:13.353"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:13.366" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:13.366" starttime="20180626 08:21:13.366"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:13.367" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:13.367" starttime="20180626 08:21:13.366"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:13.367" starttime="20180626 08:21:01.344"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:13.367" critical="yes" starttime="20180626 08:21:01.343"></status>
</test>
<test id="s1-s1-t7" name="TC01.007">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:21:13.374" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180626 08:21:13.375" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:13.375" starttime="20180626 08:21:13.373"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.375" starttime="20180626 08:21:13.375"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.375" starttime="20180626 08:21:13.375"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:21:13.376" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180626 08:21:13.377" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:13.377" starttime="20180626 08:21:13.375"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:21:13.378" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180626 08:21:13.378" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:13.378" starttime="20180626 08:21:13.377"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.386" starttime="20180626 08:21:13.378"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.393" starttime="20180626 08:21:13.387"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:13.399" starttime="20180626 08:21:13.394"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:21:13.454" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.480000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:13.455" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:13.455" starttime="20180626 08:21:13.400"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:18.083" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.480000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:18.084" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01007"...</msg>
<status status="PASS" endtime="20180626 08:21:18.084" starttime="20180626 08:21:13.455"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:22.312" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.480000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:22.312" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:22.312" starttime="20180626 08:21:18.084"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.313" starttime="20180626 08:21:22.313"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.313" starttime="20180626 08:21:22.313"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:21:22.314" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180626 08:21:22.315" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:22.315" starttime="20180626 08:21:22.313"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:21:22.316" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180626 08:21:22.316" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:22.316" starttime="20180626 08:21:22.315"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.316" starttime="20180626 08:21:22.316"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.317" starttime="20180626 08:21:22.316"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01007&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:22.342" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:22.342" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.510000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:22.342" starttime="20180626 08:21:22.317"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:22.342" starttime="20180626 08:21:22.317"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:22.342" starttime="20180626 08:21:22.317"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:22.355" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:22.355" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.520000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:22.355" starttime="20180626 08:21:22.343"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:22.355" starttime="20180626 08:21:22.343"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:22.355" starttime="20180626 08:21:22.343"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:22.355" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:22.355" starttime="20180626 08:21:22.355"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:22.356" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:22.356" starttime="20180626 08:21:22.356"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:22.356" starttime="20180626 08:21:13.373"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:22.356" critical="yes" starttime="20180626 08:21:13.372"></status>
</test>
<test id="s1-s1-t8" name="TC01.008">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:21:22.364" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180626 08:21:22.364" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:22.364" starttime="20180626 08:21:22.363"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.364" starttime="20180626 08:21:22.364"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.364" starttime="20180626 08:21:22.364"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:21:22.365" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180626 08:21:22.366" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:22.366" starttime="20180626 08:21:22.365"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:21:22.367" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180626 08:21:22.367" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:22.367" starttime="20180626 08:21:22.366"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.375" starttime="20180626 08:21:22.367"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.381" starttime="20180626 08:21:22.376"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:22.384" starttime="20180626 08:21:22.382"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:21:22.431" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.580000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:22.432" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:22.432" starttime="20180626 08:21:22.384"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:27.612" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.590000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:27.613" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01008"...</msg>
<status status="PASS" endtime="20180626 08:21:27.613" starttime="20180626 08:21:22.432"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:31.289" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.590000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:31.289" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:31.289" starttime="20180626 08:21:27.613"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.290" starttime="20180626 08:21:31.289"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.290" starttime="20180626 08:21:31.290"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:21:31.291" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180626 08:21:31.292" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:31.292" starttime="20180626 08:21:31.290"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:21:31.293" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180626 08:21:31.293" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:31.293" starttime="20180626 08:21:31.292"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.293" starttime="20180626 08:21:31.293"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.294" starttime="20180626 08:21:31.293"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01008&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:31.321" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:31.321" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.620000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:31.321" starttime="20180626 08:21:31.294"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:31.321" starttime="20180626 08:21:31.294"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:31.321" starttime="20180626 08:21:31.294"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:31.333" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:31.333" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.640000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:31.333" starttime="20180626 08:21:31.321"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:31.333" starttime="20180626 08:21:31.321"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:31.333" starttime="20180626 08:21:31.321"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:31.333" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:31.334" starttime="20180626 08:21:31.333"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:31.334" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:31.334" starttime="20180626 08:21:31.334"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:31.334" starttime="20180626 08:21:22.362"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:31.334" critical="yes" starttime="20180626 08:21:22.362"></status>
</test>
<test id="s1-s1-t9" name="TC01.009">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:21:31.342" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180626 08:21:31.342" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:31.342" starttime="20180626 08:21:31.341"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.342" starttime="20180626 08:21:31.342"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.342" starttime="20180626 08:21:31.342"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:21:31.344" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180626 08:21:31.344" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:31.344" starttime="20180626 08:21:31.343"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:21:31.345" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180626 08:21:31.345" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:31.345" starttime="20180626 08:21:31.344"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.353" starttime="20180626 08:21:31.345"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.373" starttime="20180626 08:21:31.354"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:31.386" starttime="20180626 08:21:31.374"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:21:31.593" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.800000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:31.594" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:31.594" starttime="20180626 08:21:31.386"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:37.976" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.800000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:37.977" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01009"...</msg>
<status status="PASS" endtime="20180626 08:21:37.977" starttime="20180626 08:21:31.594"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:43.308" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.810000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:43.309" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:43.309" starttime="20180626 08:21:37.977"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.309" starttime="20180626 08:21:43.309"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.310" starttime="20180626 08:21:43.310"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:21:43.311" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180626 08:21:43.311" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:43.311" starttime="20180626 08:21:43.310"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:21:43.312" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180626 08:21:43.313" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:43.313" starttime="20180626 08:21:43.311"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.313" starttime="20180626 08:21:43.313"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.313" starttime="20180626 08:21:43.313"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01009&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:43.338" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:43.338" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.840000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:43.338" starttime="20180626 08:21:43.314"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:43.338" starttime="20180626 08:21:43.314"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:43.338" starttime="20180626 08:21:43.313"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:43.350" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:43.350" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.860000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:43.351" starttime="20180626 08:21:43.339"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:43.351" starttime="20180626 08:21:43.339"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:43.351" starttime="20180626 08:21:43.338"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:43.351" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:43.351" starttime="20180626 08:21:43.351"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:43.352" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:43.352" starttime="20180626 08:21:43.351"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:43.352" starttime="20180626 08:21:31.340"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:43.352" critical="yes" starttime="20180626 08:21:31.340"></status>
</test>
<test id="s1-s1-t10" name="TC01.010.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:21:43.359" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180626 08:21:43.360" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:43.360" starttime="20180626 08:21:43.358"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.360" starttime="20180626 08:21:43.360"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.360" starttime="20180626 08:21:43.360"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:21:43.361" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180626 08:21:43.361" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:43.362" starttime="20180626 08:21:43.360"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:21:43.363" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180626 08:21:43.363" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:43.363" starttime="20180626 08:21:43.362"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.371" starttime="20180626 08:21:43.363"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.377" starttime="20180626 08:21:43.372"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:43.388" starttime="20180626 08:21:43.378"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:21:43.480" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.930000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:43.480" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:43.480" starttime="20180626 08:21:43.388"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:48.109" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.940000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:48.110" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010P...</msg>
<status status="PASS" endtime="20180626 08:21:48.110" starttime="20180626 08:21:43.481"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:52.289" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.940000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:52.289" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:52.289" starttime="20180626 08:21:48.110"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.290" starttime="20180626 08:21:52.289"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.290" starttime="20180626 08:21:52.290"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:21:52.291" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180626 08:21:52.292" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:52.292" starttime="20180626 08:21:52.290"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:21:52.293" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180626 08:21:52.293" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:21:52.293" starttime="20180626 08:21:52.292"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.293" starttime="20180626 08:21:52.293"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.294" starttime="20180626 08:21:52.293"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:52.319" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:52.319" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.980000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:52.320" starttime="20180626 08:21:52.294"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:52.320" starttime="20180626 08:21:52.294"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:52.320" starttime="20180626 08:21:52.294"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:21:52.332" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:21:52.332" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.990000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:21:52.332" starttime="20180626 08:21:52.320"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:52.332" starttime="20180626 08:21:52.320"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:52.332" starttime="20180626 08:21:52.320"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:52.333" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:52.333" starttime="20180626 08:21:52.333"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:21:52.333" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:21:52.333" starttime="20180626 08:21:52.333"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:52.334" starttime="20180626 08:21:43.358"></status>
</kw>
<status status="PASS" endtime="20180626 08:21:52.334" critical="yes" starttime="20180626 08:21:43.357"></status>
</test>
<test id="s1-s1-t11" name="TC01.010">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:21:52.341" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180626 08:21:52.342" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:52.342" starttime="20180626 08:21:52.340"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.342" starttime="20180626 08:21:52.342"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.342" starttime="20180626 08:21:52.342"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:21:52.343" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180626 08:21:52.343" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:52.344" starttime="20180626 08:21:52.342"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:21:52.345" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180626 08:21:52.345" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:21:52.345" starttime="20180626 08:21:52.344"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.353" starttime="20180626 08:21:52.345"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.360" starttime="20180626 08:21:52.354"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:21:52.363" starttime="20180626 08:21:52.361"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:21:52.424" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.050000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:52.424" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:21:52.425" starttime="20180626 08:21:52.364"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:21:58.006" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:21:58.007" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010M...</msg>
<status status="PASS" endtime="20180626 08:21:58.007" starttime="20180626 08:21:52.425"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:01.282" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:01.283" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:01.283" starttime="20180626 08:21:58.007"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.283" starttime="20180626 08:22:01.283"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.284" starttime="20180626 08:22:01.283"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:22:01.285" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180626 08:22:01.285" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:01.285" starttime="20180626 08:22:01.284"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:22:01.286" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180626 08:22:01.286" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:01.286" starttime="20180626 08:22:01.285"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.287" starttime="20180626 08:22:01.286"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.287" starttime="20180626 08:22:01.287"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010MOD..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:01.313" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:01.313" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.100000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:01.313" starttime="20180626 08:22:01.288"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:01.313" starttime="20180626 08:22:01.288"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:01.313" starttime="20180626 08:22:01.287"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:01.325" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:01.325" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.110000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:01.325" starttime="20180626 08:22:01.314"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:01.325" starttime="20180626 08:22:01.313"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:01.325" starttime="20180626 08:22:01.313"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:01.326" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:01.326" starttime="20180626 08:22:01.326"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:01.326" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:01.326" starttime="20180626 08:22:01.326"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:01.327" starttime="20180626 08:21:52.340"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:01.327" critical="yes" starttime="20180626 08:21:52.339"></status>
</test>
<test id="s1-s1-t12" name="TC01.011.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:22:01.334" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180626 08:22:01.334" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:01.335" starttime="20180626 08:22:01.333"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.335" starttime="20180626 08:22:01.335"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.335" starttime="20180626 08:22:01.335"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:22:01.336" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180626 08:22:01.336" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:01.336" starttime="20180626 08:22:01.335"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:22:01.337" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180626 08:22:01.338" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:01.338" starttime="20180626 08:22:01.337"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.346" starttime="20180626 08:22:01.338"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.353" starttime="20180626 08:22:01.347"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:01.356" starttime="20180626 08:22:01.354"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:22:01.432" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.180000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:01.432" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:01.432" starttime="20180626 08:22:01.356"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:07.975" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.180000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:07.976" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01011P...</msg>
<status status="PASS" endtime="20180626 08:22:07.976" starttime="20180626 08:22:01.433"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:13.307" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.190000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:13.307" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:13.307" starttime="20180626 08:22:07.976"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.308" starttime="20180626 08:22:13.308"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.308" starttime="20180626 08:22:13.308"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:22:13.309" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180626 08:22:13.310" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:13.310" starttime="20180626 08:22:13.308"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:22:13.311" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180626 08:22:13.311" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:13.311" starttime="20180626 08:22:13.310"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.311" starttime="20180626 08:22:13.311"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.312" starttime="20180626 08:22:13.311"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:13.337" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:13.337" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.220000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:13.337" starttime="20180626 08:22:13.312"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:13.337" starttime="20180626 08:22:13.312"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:13.338" starttime="20180626 08:22:13.312"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:13.350" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:13.350" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.240000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:13.350" starttime="20180626 08:22:13.338"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:13.350" starttime="20180626 08:22:13.338"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:13.350" starttime="20180626 08:22:13.338"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:13.350" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:13.350" starttime="20180626 08:22:13.350"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:13.351" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:13.351" starttime="20180626 08:22:13.351"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:13.351" starttime="20180626 08:22:01.333"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:13.351" critical="yes" starttime="20180626 08:22:01.332"></status>
</test>
<test id="s1-s1-t13" name="TC01.011">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:22:13.359" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180626 08:22:13.359" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:13.359" starttime="20180626 08:22:13.358"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.359" starttime="20180626 08:22:13.359"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.359" starttime="20180626 08:22:13.359"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:22:13.361" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180626 08:22:13.361" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180626 08:22:13.361" starttime="20180626 08:22:13.360"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:22:13.362" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180626 08:22:13.362" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:13.362" starttime="20180626 08:22:13.361"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.371" starttime="20180626 08:22:13.362"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.378" starttime="20180626 08:22:13.372"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:13.383" starttime="20180626 08:22:13.379"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:22:13.424" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.300000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:13.425" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:13.425" starttime="20180626 08:22:13.383"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:18.108" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.300000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:18.109" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180626 08:22:18.109" starttime="20180626 08:22:13.425"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:22.286" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.310000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:22.286" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:22.286" starttime="20180626 08:22:18.109"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.287" starttime="20180626 08:22:22.287"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.287" starttime="20180626 08:22:22.287"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:22:22.288" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180626 08:22:22.289" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180626 08:22:22.289" starttime="20180626 08:22:22.287"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:22:22.290" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180626 08:22:22.290" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:22.290" starttime="20180626 08:22:22.289"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.290" starttime="20180626 08:22:22.290"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.291" starttime="20180626 08:22:22.290"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:22.293" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.293" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.293" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.293" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.304" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:22.304" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.320000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:22.304" starttime="20180626 08:22:22.291"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:22.304" starttime="20180626 08:22:22.291"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:22.306" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.306" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.306" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.306" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.306" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.306" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:22.325" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:22.325" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.340000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:22.325" starttime="20180626 08:22:22.304"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:22.325" starttime="20180626 08:22:22.304"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:22.325" starttime="20180626 08:22:22.291"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:22.337" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:22.337" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.360000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:22.337" starttime="20180626 08:22:22.326"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:22.337" starttime="20180626 08:22:22.325"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:22.337" starttime="20180626 08:22:22.325"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:22.338" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180626 08:22:22.338" starttime="20180626 08:22:22.337"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:22.338" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180626 08:22:22.338" starttime="20180626 08:22:22.338"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:22.338" starttime="20180626 08:22:13.357"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:22.339" critical="yes" starttime="20180626 08:22:13.356"></status>
</test>
<test id="s1-s1-t14" name="TC01.012.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:22:22.346" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180626 08:22:22.346" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:22.346" starttime="20180626 08:22:22.345"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.346" starttime="20180626 08:22:22.346"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.347" starttime="20180626 08:22:22.346"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:22:22.348" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180626 08:22:22.348" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:22.348" starttime="20180626 08:22:22.347"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:22:22.349" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180626 08:22:22.349" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:22.349" starttime="20180626 08:22:22.348"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.358" starttime="20180626 08:22:22.349"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.369" starttime="20180626 08:22:22.359"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:22.373" starttime="20180626 08:22:22.370"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:22:22.441" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.420000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:22.442" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:22.442" starttime="20180626 08:22:22.373"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:28.072" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.420000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:28.073" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01012P...</msg>
<status status="PASS" endtime="20180626 08:22:28.073" starttime="20180626 08:22:22.442"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:31.297" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.430000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:31.298" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:31.298" starttime="20180626 08:22:28.073"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.298" starttime="20180626 08:22:31.298"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.299" starttime="20180626 08:22:31.298"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:22:31.300" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180626 08:22:31.300" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:31.300" starttime="20180626 08:22:31.299"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:22:31.301" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180626 08:22:31.301" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:31.301" starttime="20180626 08:22:31.300"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.302" starttime="20180626 08:22:31.302"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.302" starttime="20180626 08:22:31.302"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:31.327" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:31.327" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.460000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:31.328" starttime="20180626 08:22:31.303"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:31.328" starttime="20180626 08:22:31.303"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:31.328" starttime="20180626 08:22:31.302"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:31.340" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:31.340" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.470000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:31.340" starttime="20180626 08:22:31.328"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:31.340" starttime="20180626 08:22:31.328"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:31.340" starttime="20180626 08:22:31.328"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:31.341" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:31.341" starttime="20180626 08:22:31.340"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:31.341" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:31.341" starttime="20180626 08:22:31.341"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:31.341" starttime="20180626 08:22:22.344"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:31.342" critical="yes" starttime="20180626 08:22:22.344"></status>
</test>
<test id="s1-s1-t15" name="TC01.012">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:22:31.349" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180626 08:22:31.349" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:31.349" starttime="20180626 08:22:31.348"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.350" starttime="20180626 08:22:31.349"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.350" starttime="20180626 08:22:31.350"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:22:31.351" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180626 08:22:31.351" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180626 08:22:31.351" starttime="20180626 08:22:31.350"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:22:31.352" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180626 08:22:31.352" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:31.352" starttime="20180626 08:22:31.351"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.361" starttime="20180626 08:22:31.353"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.373" starttime="20180626 08:22:31.362"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:31.376" starttime="20180626 08:22:31.374"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:22:31.429" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.530000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:31.430" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:31.430" starttime="20180626 08:22:31.376"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:38.013" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.540000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:38.014" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180626 08:22:38.014" starttime="20180626 08:22:31.430"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:43.294" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.540000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:43.295" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:43.295" starttime="20180626 08:22:38.014"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.295" starttime="20180626 08:22:43.295"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.296" starttime="20180626 08:22:43.295"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:22:43.297" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180626 08:22:43.297" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180626 08:22:43.297" starttime="20180626 08:22:43.296"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:22:43.298" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180626 08:22:43.298" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:43.298" starttime="20180626 08:22:43.297"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.299" starttime="20180626 08:22:43.299"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.299" starttime="20180626 08:22:43.299"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:43.302" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.302" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.302" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.302" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.313" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:43.313" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.550000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:43.313" starttime="20180626 08:22:43.300"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:43.313" starttime="20180626 08:22:43.300"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:43.315" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.315" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.315" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.315" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.315" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.315" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:22:43.334" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:43.334" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.570000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:43.334" starttime="20180626 08:22:43.313"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:43.334" starttime="20180626 08:22:43.313"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:43.334" starttime="20180626 08:22:43.299"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:43.346" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:43.347" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.590000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:43.347" starttime="20180626 08:22:43.335"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:43.347" starttime="20180626 08:22:43.335"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:43.347" starttime="20180626 08:22:43.334"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:43.347" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180626 08:22:43.347" starttime="20180626 08:22:43.347"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:43.348" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180626 08:22:43.348" starttime="20180626 08:22:43.348"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:43.348" starttime="20180626 08:22:31.347"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:43.348" critical="yes" starttime="20180626 08:22:31.347"></status>
</test>
<test id="s1-s1-t16" name="TC01.013.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:22:43.355" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180626 08:22:43.356" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:43.356" starttime="20180626 08:22:43.354"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.356" starttime="20180626 08:22:43.356"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.356" starttime="20180626 08:22:43.356"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:22:43.357" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180626 08:22:43.358" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:43.358" starttime="20180626 08:22:43.356"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:22:43.359" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180626 08:22:43.359" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:43.359" starttime="20180626 08:22:43.358"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.367" starttime="20180626 08:22:43.359"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.373" starttime="20180626 08:22:43.368"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:43.381" starttime="20180626 08:22:43.374"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:22:43.624" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.760000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:43.624" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:43.624" starttime="20180626 08:22:43.381"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:48.058" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.760000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:48.058" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01013P...</msg>
<status status="PASS" endtime="20180626 08:22:48.058" starttime="20180626 08:22:43.625"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:52.287" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.770000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:52.287" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:52.288" starttime="20180626 08:22:48.059"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.288" starttime="20180626 08:22:52.288"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.288" starttime="20180626 08:22:52.288"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:22:52.290" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180626 08:22:52.290" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:52.290" starttime="20180626 08:22:52.289"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:22:52.291" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180626 08:22:52.291" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:22:52.291" starttime="20180626 08:22:52.290"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.292" starttime="20180626 08:22:52.291"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.292" starttime="20180626 08:22:52.292"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:52.318" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:52.318" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.810000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:52.318" starttime="20180626 08:22:52.293"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:52.319" starttime="20180626 08:22:52.292"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:52.319" starttime="20180626 08:22:52.292"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:22:52.331" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:22:52.331" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.820000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:22:52.331" starttime="20180626 08:22:52.319"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:52.331" starttime="20180626 08:22:52.319"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:52.331" starttime="20180626 08:22:52.319"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:52.332" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:52.332" starttime="20180626 08:22:52.331"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:22:52.332" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:22:52.332" starttime="20180626 08:22:52.332"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:52.332" starttime="20180626 08:22:43.354"></status>
</kw>
<status status="PASS" endtime="20180626 08:22:52.333" critical="yes" starttime="20180626 08:22:43.353"></status>
</test>
<test id="s1-s1-t17" name="TC01.013">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:22:52.340" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180626 08:22:52.340" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:52.340" starttime="20180626 08:22:52.339"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.341" starttime="20180626 08:22:52.340"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.341" starttime="20180626 08:22:52.341"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:22:52.342" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180626 08:22:52.342" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180626 08:22:52.342" starttime="20180626 08:22:52.341"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:22:52.343" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180626 08:22:52.343" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:22:52.343" starttime="20180626 08:22:52.342"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.352" starttime="20180626 08:22:52.344"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.365" starttime="20180626 08:22:52.354"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:22:52.369" starttime="20180626 08:22:52.366"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:22:52.410" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.880000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:52.410" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:22:52.410" starttime="20180626 08:22:52.369"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:22:58.098" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.890000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:22:58.098" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180626 08:22:58.099" starttime="20180626 08:22:52.411"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:23:01.330" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.890000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:23:01.331" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:23:01.331" starttime="20180626 08:22:58.099"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.331" starttime="20180626 08:23:01.331"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.332" starttime="20180626 08:23:01.332"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:23:01.333" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180626 08:23:01.333" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180626 08:23:01.333" starttime="20180626 08:23:01.332"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:23:01.334" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180626 08:23:01.334" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:23:01.334" starttime="20180626 08:23:01.333"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.335" starttime="20180626 08:23:01.335"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.335" starttime="20180626 08:23:01.335"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:23:01.337" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.338" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.338" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.338" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.349" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:23:01.349" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.920000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:23:01.349" starttime="20180626 08:23:01.336"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:01.349" starttime="20180626 08:23:01.335"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:23:01.351" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.351" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.351" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.351" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.351" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.351" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180626 08:23:01.371" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:23:01.371" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.940000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:23:01.371" starttime="20180626 08:23:01.349"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:01.371" starttime="20180626 08:23:01.349"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:01.371" starttime="20180626 08:23:01.335"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:23:01.383" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:23:01.383" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.950000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:23:01.383" starttime="20180626 08:23:01.372"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:01.383" starttime="20180626 08:23:01.372"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:01.383" starttime="20180626 08:23:01.371"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:23:01.384" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180626 08:23:01.384" starttime="20180626 08:23:01.383"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:23:01.384" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180626 08:23:01.384" starttime="20180626 08:23:01.384"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:01.384" starttime="20180626 08:22:52.338"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:01.385" critical="yes" starttime="20180626 08:22:52.338"></status>
</test>
<test id="s1-s1-t18" name="TC01.031.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:23:01.392" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180626 08:23:01.392" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:23:01.392" starttime="20180626 08:23:01.391"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.393" starttime="20180626 08:23:01.392"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.393" starttime="20180626 08:23:01.393"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:23:01.394" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180626 08:23:01.394" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:23:01.394" starttime="20180626 08:23:01.393"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:23:01.395" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180626 08:23:01.395" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:23:01.395" starttime="20180626 08:23:01.394"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.404" starttime="20180626 08:23:01.396"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.410" starttime="20180626 08:23:01.405"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:01.414" starttime="20180626 08:23:01.411"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:23:01.464" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.000000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:23:01.464" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:23:01.464" starttime="20180626 08:23:01.414"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:23:08.004" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.010000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:23:08.005" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01031P...</msg>
<status status="PASS" endtime="20180626 08:23:08.005" starttime="20180626 08:23:01.465"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:23:13.295" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.010000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:23:13.296" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:23:13.296" starttime="20180626 08:23:08.005"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.296" starttime="20180626 08:23:13.296"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.297" starttime="20180626 08:23:13.296"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:23:13.298" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180626 08:23:13.298" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:23:13.298" starttime="20180626 08:23:13.297"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:23:13.299" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180626 08:23:13.299" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:23:13.299" starttime="20180626 08:23:13.298"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.300" starttime="20180626 08:23:13.299"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.300" starttime="20180626 08:23:13.300"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01031PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:23:13.325" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:23:13.325" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.040000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:23:13.325" starttime="20180626 08:23:13.301"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:13.325" starttime="20180626 08:23:13.300"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:13.325" starttime="20180626 08:23:13.300"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:23:13.337" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:23:13.337" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.050000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:23:13.338" starttime="20180626 08:23:13.326"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:13.338" starttime="20180626 08:23:13.326"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:13.338" starttime="20180626 08:23:13.325"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:23:13.338" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:23:13.338" starttime="20180626 08:23:13.338"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:23:13.339" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:23:13.339" starttime="20180626 08:23:13.338"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:13.339" starttime="20180626 08:23:01.390"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:13.339" critical="yes" starttime="20180626 08:23:01.390"></status>
</test>
<test id="s1-s1-t19" name="TC01.031">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_CancelRS[@TimeStamp]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180626 08:23:13.346" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180626 08:23:13.347" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRQ1-EXPcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:23:13.347" starttime="20180626 08:23:13.345"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.347" starttime="20180626 08:23:13.347"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.347" starttime="20180626 08:23:13.347"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180626 08:23:13.348" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180626 08:23:13.348" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-BWcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180626 08:23:13.348" starttime="20180626 08:23:13.347"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180626 08:23:13.350" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180626 08:23:13.350" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180626 08:23:13.350" starttime="20180626 08:23:13.349"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.358" starttime="20180626 08:23:13.350"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.364" starttime="20180626 08:23:13.359"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:13.367" starttime="20180626 08:23:13.365"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180626 08:23:13.432" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.130000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:23:13.432" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:23:13.432" starttime="20180626 08:23:13.367"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180626 08:23:17.960" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.140000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:23:17.960" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180626 08:23:17.960" starttime="20180626 08:23:13.432"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180626 08:23:22.293" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.140000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180626 08:23:22.293" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180626 08:23:22.293" starttime="20180626 08:23:17.960"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:22.294" starttime="20180626 08:23:22.294"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:22.294" starttime="20180626 08:23:22.294"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180626 08:23:22.295" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180626 08:23:22.296" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:23:22.296" starttime="20180626 08:23:22.294"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180626 08:23:22.297" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180626 08:23:22.297" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml']</msg>
<status status="PASS" endtime="20180626 08:23:22.297" starttime="20180626 08:23:22.296"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:22.297" starttime="20180626 08:23:22.297"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180626 08:23:22.298" starttime="20180626 08:23:22.297"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:23:22.311" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:23:22.311" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.160000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:23:22.312" starttime="20180626 08:23:22.298"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:22.312" starttime="20180626 08:23:22.298"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:22.312" starttime="20180626 08:23:22.298"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180626 08:23:22.324" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180626 08:23:22.324" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.170000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180626 08:23:22.325" starttime="20180626 08:23:22.312"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:22.325" starttime="20180626 08:23:22.312"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:22.325" starttime="20180626 08:23:22.312"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:23:22.325" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:23:22.325" starttime="20180626 08:23:22.325"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180626 08:23:22.326" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180626 08:23:22.326" starttime="20180626 08:23:22.325"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:22.326" starttime="20180626 08:23:13.345"></status>
</kw>
<status status="PASS" endtime="20180626 08:23:22.326" critical="yes" starttime="20180626 08:23:13.344"></status>
</test>
<status status="PASS" endtime="20180626 08:23:22.333" starttime="20180626 08:20:10.555"></status>
</suite>
<status status="PASS" endtime="20180626 08:23:22.339" starttime="20180626 08:20:10.212"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="19">Critical Tests</stat>
<stat fail="0" pass="19">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="Bw-Exp" pass="19">Bw-Exp</stat>
<stat fail="0" id="s1-s1" name="Expedia-BW-Booking" pass="19">Bw-Exp.Expedia-BW-Booking</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
