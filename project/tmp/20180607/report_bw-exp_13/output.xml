<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180607 09:08:01.724" generator="Robot 3.0.2 (Python 2.7.10 on linux2)">
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp" id="s1" name="Bw-Exp">
<kw type="setup" name="start">
<kw name="Stop Server" library="Doraemon">
<doc>Examples:</doc>
<arguments>
<arg>9011</arg>
<arg>8011</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.057" starttime="20180607 09:08:02.028"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/BWDataClear.sql</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.058" starttime="20180607 09:08:02.058"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/EXPDataClear.sql</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.058" starttime="20180607 09:08:02.058"></status>
</kw>
<kw name="ClearBW">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE bestwestern_adapter;DELETE FROM reservation_room_stay;DELETE FROM reservation_entity;DELETE FROM reservation_event;</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<msg timestamp="20180607 09:08:02.065" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180607 09:08:02.066" starttime="20180607 09:08:02.059"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:02.066" starttime="20180607 09:08:02.058"></status>
</kw>
<kw name="ClearEXP">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE expedia_endpoint;DELETE FROM reservation;DELETE FROM notify_task;DELETE FROM callback_task;</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<msg timestamp="20180607 09:08:02.069" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180607 09:08:02.069" starttime="20180607 09:08:02.066"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:02.069" starttime="20180607 09:08:02.066"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:02.069" starttime="20180607 09:08:02.027"></status>
</kw>
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking.txt" id="s1-s1" name="Expedia-BW-Booking">
<test id="s1-s1-t1" name="TC01.001">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:08:02.077" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:08:02.077" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:02.077" starttime="20180607 09:08:02.075"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.077" starttime="20180607 09:08:02.077"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.078" starttime="20180607 09:08:02.078"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:08:02.079" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:08:02.079" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:02.079" starttime="20180607 09:08:02.078"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:08:02.080" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:08:02.081" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:02.081" starttime="20180607 09:08:02.079"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.092" starttime="20180607 09:08:02.081"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.099" starttime="20180607 09:08:02.093"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:02.107" starttime="20180607 09:08:02.100"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:08:03.941" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.550000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:03.941" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:03.942" starttime="20180607 09:08:02.108"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:11.186" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.550000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:11.186" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01001"...</msg>
<status status="PASS" endtime="20180607 09:08:11.186" starttime="20180607 09:08:03.942"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:15.817" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.560000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:15.817" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:15.817" starttime="20180607 09:08:11.187"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:15.818" starttime="20180607 09:08:15.818"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:15.818" starttime="20180607 09:08:15.818"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:08:15.819" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:08:15.820" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:15.820" starttime="20180607 09:08:15.818"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:08:15.821" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:08:15.821" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:15.821" starttime="20180607 09:08:15.820"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:15.822" starttime="20180607 09:08:15.822"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:15.822" starttime="20180607 09:08:15.822"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01001&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:15.964" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:15.964" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.710000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:15.964" starttime="20180607 09:08:15.823"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:15.964" starttime="20180607 09:08:15.823"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:15.964" starttime="20180607 09:08:15.822"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:15.977" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:15.978" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.720000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:15.978" starttime="20180607 09:08:15.965"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:15.978" starttime="20180607 09:08:15.965"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:15.978" starttime="20180607 09:08:15.964"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:15.978" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:15.978" starttime="20180607 09:08:15.978"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:15.979" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:15.979" starttime="20180607 09:08:15.979"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:15.979" starttime="20180607 09:08:02.075"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:15.979" critical="yes" starttime="20180607 09:08:02.074"></status>
</test>
<test id="s1-s1-t2" name="TC01.002">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:08:15.987" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:08:15.987" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:15.987" starttime="20180607 09:08:15.986"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:15.988" starttime="20180607 09:08:15.988"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:15.988" starttime="20180607 09:08:15.988"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:08:15.989" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:08:15.989" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:15.989" starttime="20180607 09:08:15.988"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:08:15.991" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:08:15.991" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:15.991" starttime="20180607 09:08:15.990"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:16.001" starttime="20180607 09:08:15.991"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:16.014" starttime="20180607 09:08:16.002"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:16.017" starttime="20180607 09:08:16.015"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:08:16.193" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.860000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:16.195" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:16.195" starttime="20180607 09:08:16.017"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:20.827" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.860000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:20.828" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01002"...</msg>
<status status="PASS" endtime="20180607 09:08:20.828" starttime="20180607 09:08:16.196"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:24.806" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.870000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:24.806" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:24.806" starttime="20180607 09:08:20.828"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.807" starttime="20180607 09:08:24.807"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.807" starttime="20180607 09:08:24.807"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:08:24.808" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:08:24.809" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:24.809" starttime="20180607 09:08:24.807"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:08:24.810" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:08:24.810" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:24.810" starttime="20180607 09:08:24.809"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.811" starttime="20180607 09:08:24.811"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.811" starttime="20180607 09:08:24.811"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01002&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:24.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:24.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.900000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:24.838" starttime="20180607 09:08:24.812"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:24.839" starttime="20180607 09:08:24.812"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:24.839" starttime="20180607 09:08:24.811"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:24.851" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:24.851" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.920000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:24.851" starttime="20180607 09:08:24.839"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:24.851" starttime="20180607 09:08:24.839"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:24.851" starttime="20180607 09:08:24.839"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:24.852" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:24.852" starttime="20180607 09:08:24.851"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:24.852" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:24.852" starttime="20180607 09:08:24.852"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:24.852" starttime="20180607 09:08:15.985"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:24.853" critical="yes" starttime="20180607 09:08:15.985"></status>
</test>
<test id="s1-s1-t3" name="TC01.003">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:08:24.860" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:08:24.860" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:24.860" starttime="20180607 09:08:24.859"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.860" starttime="20180607 09:08:24.860"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.861" starttime="20180607 09:08:24.861"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:08:24.862" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:08:24.862" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:24.862" starttime="20180607 09:08:24.861"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:08:24.863" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:08:24.863" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:24.863" starttime="20180607 09:08:24.862"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.872" starttime="20180607 09:08:24.863"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.879" starttime="20180607 09:08:24.873"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:24.883" starttime="20180607 09:08:24.880"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:08:24.979" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.020000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:24.979" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:24.979" starttime="20180607 09:08:24.883"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:31.167" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.030000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:31.167" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01003"...</msg>
<status status="PASS" endtime="20180607 09:08:31.168" starttime="20180607 09:08:24.980"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:36.799" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.030000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:36.800" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:36.800" starttime="20180607 09:08:31.168"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.800" starttime="20180607 09:08:36.800"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.801" starttime="20180607 09:08:36.801"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:08:36.802" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:08:36.802" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:36.802" starttime="20180607 09:08:36.801"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:08:36.803" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:08:36.803" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:36.804" starttime="20180607 09:08:36.802"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.804" starttime="20180607 09:08:36.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.804" starttime="20180607 09:08:36.804"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01003&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:36.831" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:36.831" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.060000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:36.831" starttime="20180607 09:08:36.805"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:36.831" starttime="20180607 09:08:36.805"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:36.831" starttime="20180607 09:08:36.804"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:36.843" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:36.843" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.070000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:36.844" starttime="20180607 09:08:36.831"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:36.844" starttime="20180607 09:08:36.831"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:36.844" starttime="20180607 09:08:36.831"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:36.844" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:36.844" starttime="20180607 09:08:36.844"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:36.845" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:36.845" starttime="20180607 09:08:36.844"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:36.845" starttime="20180607 09:08:24.858"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:36.845" critical="yes" starttime="20180607 09:08:24.858"></status>
</test>
<test id="s1-s1-t4" name="TC01.004">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:08:36.852" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:08:36.853" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:36.853" starttime="20180607 09:08:36.851"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.853" starttime="20180607 09:08:36.853"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.853" starttime="20180607 09:08:36.853"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:08:36.854" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:08:36.854" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:36.855" starttime="20180607 09:08:36.853"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:08:36.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:08:36.856" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:36.856" starttime="20180607 09:08:36.855"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.864" starttime="20180607 09:08:36.856"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.881" starttime="20180607 09:08:36.865"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:36.887" starttime="20180607 09:08:36.882"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:08:36.955" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.160000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:36.955" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:36.955" starttime="20180607 09:08:36.887"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:41.238" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.170000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:41.239" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01004"...</msg>
<status status="PASS" endtime="20180607 09:08:41.239" starttime="20180607 09:08:36.956"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:45.818" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.170000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:45.818" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:45.818" starttime="20180607 09:08:41.239"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.819" starttime="20180607 09:08:45.818"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.819" starttime="20180607 09:08:45.819"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:08:45.820" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:08:45.820" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:45.820" starttime="20180607 09:08:45.819"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:08:45.821" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:08:45.822" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:45.822" starttime="20180607 09:08:45.820"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.822" starttime="20180607 09:08:45.822"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.822" starttime="20180607 09:08:45.822"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01004&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:45.848" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:45.848" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.200000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:45.848" starttime="20180607 09:08:45.823"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:45.848" starttime="20180607 09:08:45.823"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:45.848" starttime="20180607 09:08:45.822"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:45.860" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:45.860" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.210000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:45.860" starttime="20180607 09:08:45.849"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:45.861" starttime="20180607 09:08:45.849"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:45.861" starttime="20180607 09:08:45.848"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:45.861" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:45.861" starttime="20180607 09:08:45.861"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:45.861" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:45.862" starttime="20180607 09:08:45.861"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:45.862" starttime="20180607 09:08:36.851"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:45.862" critical="yes" starttime="20180607 09:08:36.850"></status>
</test>
<test id="s1-s1-t5" name="TC01.005">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:08:45.869" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:08:45.870" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:45.870" starttime="20180607 09:08:45.868"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.870" starttime="20180607 09:08:45.870"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.870" starttime="20180607 09:08:45.870"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:08:45.871" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:08:45.871" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:45.871" starttime="20180607 09:08:45.870"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:08:45.873" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:08:45.873" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:45.873" starttime="20180607 09:08:45.872"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.881" starttime="20180607 09:08:45.873"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.899" starttime="20180607 09:08:45.882"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:45.903" starttime="20180607 09:08:45.900"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:08:45.981" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.310000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:45.982" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:45.982" starttime="20180607 09:08:45.903"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:51.165" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.320000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:51.165" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01005"...</msg>
<status status="PASS" endtime="20180607 09:08:51.165" starttime="20180607 09:08:45.982"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:08:54.791" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.320000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:54.791" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:54.791" starttime="20180607 09:08:51.165"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.792" starttime="20180607 09:08:54.791"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.792" starttime="20180607 09:08:54.792"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:08:54.793" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:08:54.793" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:54.793" starttime="20180607 09:08:54.792"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:08:54.794" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:08:54.795" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:08:54.795" starttime="20180607 09:08:54.794"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.795" starttime="20180607 09:08:54.795"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.795" starttime="20180607 09:08:54.795"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01005&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:54.821" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:54.821" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.350000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:54.821" starttime="20180607 09:08:54.796"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:54.821" starttime="20180607 09:08:54.796"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:54.821" starttime="20180607 09:08:54.796"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:08:54.833" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:08:54.833" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.360000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:08:54.833" starttime="20180607 09:08:54.822"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:54.834" starttime="20180607 09:08:54.822"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:54.834" starttime="20180607 09:08:54.821"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:54.834" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:54.834" starttime="20180607 09:08:54.834"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:08:54.834" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:08:54.835" starttime="20180607 09:08:54.834"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:54.835" starttime="20180607 09:08:45.868"></status>
</kw>
<status status="PASS" endtime="20180607 09:08:54.835" critical="yes" starttime="20180607 09:08:45.867"></status>
</test>
<test id="s1-s1-t6" name="TC01.006">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:08:54.842" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:08:54.843" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:54.843" starttime="20180607 09:08:54.841"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.843" starttime="20180607 09:08:54.843"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.843" starttime="20180607 09:08:54.843"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:08:54.844" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:08:54.844" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:54.844" starttime="20180607 09:08:54.843"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:08:54.846" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:08:54.846" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:08:54.846" starttime="20180607 09:08:54.845"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.854" starttime="20180607 09:08:54.846"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.877" starttime="20180607 09:08:54.855"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:08:54.880" starttime="20180607 09:08:54.878"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:08:54.965" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.420000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:08:54.966" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:08:54.966" starttime="20180607 09:08:54.880"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:00.848" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.430000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:00.848" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01006"...</msg>
<status status="PASS" endtime="20180607 09:09:00.848" starttime="20180607 09:08:54.966"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:06.782" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.440000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:06.782" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:06.782" starttime="20180607 09:09:00.849"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.782" starttime="20180607 09:09:06.782"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.783" starttime="20180607 09:09:06.783"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:09:06.784" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:09:06.784" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:06.784" starttime="20180607 09:09:06.783"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:09:06.785" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:09:06.786" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:06.786" starttime="20180607 09:09:06.784"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.786" starttime="20180607 09:09:06.786"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.786" starttime="20180607 09:09:06.786"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01006&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:06.812" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:06.812" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.460000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:06.812" starttime="20180607 09:09:06.787"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:06.813" starttime="20180607 09:09:06.787"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:06.813" starttime="20180607 09:09:06.787"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:06.824" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:06.825" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.480000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:06.825" starttime="20180607 09:09:06.813"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:06.825" starttime="20180607 09:09:06.813"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:06.825" starttime="20180607 09:09:06.813"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:06.825" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:06.825" starttime="20180607 09:09:06.825"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:06.826" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:06.826" starttime="20180607 09:09:06.825"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:06.826" starttime="20180607 09:08:54.841"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:06.826" critical="yes" starttime="20180607 09:08:54.840"></status>
</test>
<test id="s1-s1-t7" name="TC01.007">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:09:06.834" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:09:06.834" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:06.834" starttime="20180607 09:09:06.832"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.834" starttime="20180607 09:09:06.834"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.834" starttime="20180607 09:09:06.834"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:09:06.835" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:09:06.836" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:06.836" starttime="20180607 09:09:06.835"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:09:06.837" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:09:06.837" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:06.837" starttime="20180607 09:09:06.836"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.845" starttime="20180607 09:09:06.837"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.853" starttime="20180607 09:09:06.846"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:06.856" starttime="20180607 09:09:06.854"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:09:06.933" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.550000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:06.934" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:06.934" starttime="20180607 09:09:06.857"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:10.761" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.560000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:10.761" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01007"...</msg>
<status status="PASS" endtime="20180607 09:09:10.761" starttime="20180607 09:09:06.934"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:15.797" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.560000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:15.797" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:15.798" starttime="20180607 09:09:10.762"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.798" starttime="20180607 09:09:15.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.798" starttime="20180607 09:09:15.798"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:09:15.800" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:09:15.800" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:15.800" starttime="20180607 09:09:15.798"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:09:15.801" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:09:15.801" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:15.801" starttime="20180607 09:09:15.800"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.801" starttime="20180607 09:09:15.801"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.802" starttime="20180607 09:09:15.802"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01007&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:15.827" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:15.827" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.590000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:15.828" starttime="20180607 09:09:15.802"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:15.828" starttime="20180607 09:09:15.802"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:15.828" starttime="20180607 09:09:15.802"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:15.840" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:15.840" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.600000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:15.840" starttime="20180607 09:09:15.828"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:15.840" starttime="20180607 09:09:15.828"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:15.840" starttime="20180607 09:09:15.828"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:15.841" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:15.841" starttime="20180607 09:09:15.840"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:15.841" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:15.841" starttime="20180607 09:09:15.841"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:15.841" starttime="20180607 09:09:06.832"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:15.842" critical="yes" starttime="20180607 09:09:06.831"></status>
</test>
<test id="s1-s1-t8" name="TC01.008">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:09:15.849" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:09:15.849" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:15.849" starttime="20180607 09:09:15.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.849" starttime="20180607 09:09:15.849"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.850" starttime="20180607 09:09:15.850"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:09:15.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:09:15.851" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:15.851" starttime="20180607 09:09:15.850"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:09:15.852" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:09:15.852" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:15.852" starttime="20180607 09:09:15.851"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.861" starttime="20180607 09:09:15.853"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.878" starttime="20180607 09:09:15.862"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:15.880" starttime="20180607 09:09:15.879"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:09:15.981" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.690000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:15.982" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:15.982" starttime="20180607 09:09:15.881"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:21.266" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.690000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:21.267" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01008"...</msg>
<status status="PASS" endtime="20180607 09:09:21.267" starttime="20180607 09:09:15.982"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:24.794" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.700000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:24.794" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:24.794" starttime="20180607 09:09:21.268"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.795" starttime="20180607 09:09:24.795"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.795" starttime="20180607 09:09:24.795"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:09:24.796" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:09:24.797" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:24.797" starttime="20180607 09:09:24.795"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:09:24.798" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:09:24.798" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:24.798" starttime="20180607 09:09:24.797"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.798" starttime="20180607 09:09:24.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.799" starttime="20180607 09:09:24.798"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01008&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:24.826" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:24.826" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.730000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:24.827" starttime="20180607 09:09:24.799"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:24.827" starttime="20180607 09:09:24.799"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:24.827" starttime="20180607 09:09:24.799"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:24.839" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:24.839" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.740000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:24.839" starttime="20180607 09:09:24.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:24.839" starttime="20180607 09:09:24.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:24.839" starttime="20180607 09:09:24.827"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:24.840" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:24.840" starttime="20180607 09:09:24.839"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:24.840" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:24.840" starttime="20180607 09:09:24.840"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:24.840" starttime="20180607 09:09:15.847"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:24.841" critical="yes" starttime="20180607 09:09:15.847"></status>
</test>
<test id="s1-s1-t9" name="TC01.009">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:09:24.848" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:09:24.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:24.848" starttime="20180607 09:09:24.847"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.849" starttime="20180607 09:09:24.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.849" starttime="20180607 09:09:24.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:09:24.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:09:24.850" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:24.850" starttime="20180607 09:09:24.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:09:24.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:09:24.851" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:24.852" starttime="20180607 09:09:24.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.860" starttime="20180607 09:09:24.852"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.874" starttime="20180607 09:09:24.861"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:24.877" starttime="20180607 09:09:24.875"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:09:24.929" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.800000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:24.930" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:24.930" starttime="20180607 09:09:24.878"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:31.119" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.810000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:31.119" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01009"...</msg>
<status status="PASS" endtime="20180607 09:09:31.120" starttime="20180607 09:09:24.930"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:36.801" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.820000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:36.802" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:36.802" starttime="20180607 09:09:31.120"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.802" starttime="20180607 09:09:36.802"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.802" starttime="20180607 09:09:36.802"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:09:36.803" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:09:36.804" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:36.804" starttime="20180607 09:09:36.802"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:09:36.805" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:09:36.805" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:36.805" starttime="20180607 09:09:36.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.805" starttime="20180607 09:09:36.805"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.806" starttime="20180607 09:09:36.805"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01009&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:36.831" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:36.831" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.840000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:36.831" starttime="20180607 09:09:36.806"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:36.831" starttime="20180607 09:09:36.806"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:36.831" starttime="20180607 09:09:36.806"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:36.844" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:36.844" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.860000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:36.844" starttime="20180607 09:09:36.832"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:36.844" starttime="20180607 09:09:36.832"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:36.844" starttime="20180607 09:09:36.832"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:36.844" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:36.845" starttime="20180607 09:09:36.844"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:36.845" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:36.845" starttime="20180607 09:09:36.845"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:36.845" starttime="20180607 09:09:24.846"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:36.845" critical="yes" starttime="20180607 09:09:24.846"></status>
</test>
<test id="s1-s1-t10" name="TC01.010.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:09:36.853" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:09:36.853" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:36.853" starttime="20180607 09:09:36.852"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.853" starttime="20180607 09:09:36.853"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.854" starttime="20180607 09:09:36.854"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:09:36.855" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:09:36.855" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:36.855" starttime="20180607 09:09:36.854"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:09:36.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:09:36.856" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:36.856" starttime="20180607 09:09:36.855"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.865" starttime="20180607 09:09:36.856"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.877" starttime="20180607 09:09:36.866"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:36.887" starttime="20180607 09:09:36.878"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:09:36.976" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.930000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:36.976" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:36.976" starttime="20180607 09:09:36.888"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:41.204" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.940000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:41.204" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010P...</msg>
<status status="PASS" endtime="20180607 09:09:41.204" starttime="20180607 09:09:36.977"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:45.783" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.940000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:45.784" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:45.784" starttime="20180607 09:09:41.205"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.784" starttime="20180607 09:09:45.784"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.785" starttime="20180607 09:09:45.784"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:09:45.786" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:09:45.786" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:45.786" starttime="20180607 09:09:45.785"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:09:45.787" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:09:45.787" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:45.787" starttime="20180607 09:09:45.786"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.788" starttime="20180607 09:09:45.787"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.788" starttime="20180607 09:09:45.788"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:45.814" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:45.814" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.970000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:45.814" starttime="20180607 09:09:45.789"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:45.814" starttime="20180607 09:09:45.788"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:45.814" starttime="20180607 09:09:45.788"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:45.826" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:45.826" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.990000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:45.827" starttime="20180607 09:09:45.815"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:45.827" starttime="20180607 09:09:45.815"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:45.827" starttime="20180607 09:09:45.814"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:45.827" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:45.827" starttime="20180607 09:09:45.827"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:45.828" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:45.828" starttime="20180607 09:09:45.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:45.828" starttime="20180607 09:09:36.851"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:45.828" critical="yes" starttime="20180607 09:09:36.851"></status>
</test>
<test id="s1-s1-t11" name="TC01.010">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:09:45.835" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:09:45.836" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:45.836" starttime="20180607 09:09:45.834"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.836" starttime="20180607 09:09:45.836"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.836" starttime="20180607 09:09:45.836"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:09:45.837" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:09:45.837" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:45.838" starttime="20180607 09:09:45.836"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:09:45.839" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:09:45.839" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:45.839" starttime="20180607 09:09:45.838"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.848" starttime="20180607 09:09:45.839"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.861" starttime="20180607 09:09:45.849"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:45.865" starttime="20180607 09:09:45.862"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:09:46.236" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.200000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:46.237" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:46.237" starttime="20180607 09:09:45.865"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:51.219" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.200000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:51.220" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010M...</msg>
<status status="PASS" endtime="20180607 09:09:51.220" starttime="20180607 09:09:46.237"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:09:54.796" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.210000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:54.796" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:54.796" starttime="20180607 09:09:51.220"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.796" starttime="20180607 09:09:54.796"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.797" starttime="20180607 09:09:54.797"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:09:54.798" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:09:54.798" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:54.798" starttime="20180607 09:09:54.797"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:09:54.799" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:09:54.799" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:09:54.799" starttime="20180607 09:09:54.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.800" starttime="20180607 09:09:54.800"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.800" starttime="20180607 09:09:54.800"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010MOD..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:54.826" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:54.826" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.230000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:54.826" starttime="20180607 09:09:54.801"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:54.826" starttime="20180607 09:09:54.801"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:54.826" starttime="20180607 09:09:54.800"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:09:54.839" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:09:54.839" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.250000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:09:54.839" starttime="20180607 09:09:54.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:54.839" starttime="20180607 09:09:54.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:54.839" starttime="20180607 09:09:54.827"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:54.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:54.840" starttime="20180607 09:09:54.839"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:09:54.840" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:09:54.840" starttime="20180607 09:09:54.840"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:54.840" starttime="20180607 09:09:45.834"></status>
</kw>
<status status="PASS" endtime="20180607 09:09:54.840" critical="yes" starttime="20180607 09:09:45.833"></status>
</test>
<test id="s1-s1-t12" name="TC01.011.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:09:54.848" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:09:54.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:54.848" starttime="20180607 09:09:54.847"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.848" starttime="20180607 09:09:54.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.849" starttime="20180607 09:09:54.848"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:09:54.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:09:54.850" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:54.850" starttime="20180607 09:09:54.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:09:54.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:09:54.851" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:09:54.851" starttime="20180607 09:09:54.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.860" starttime="20180607 09:09:54.851"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.867" starttime="20180607 09:09:54.861"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:09:54.869" starttime="20180607 09:09:54.868"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:09:55.041" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.390000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:09:55.042" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:09:55.042" starttime="20180607 09:09:54.869"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:01.228" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.400000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:01.229" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01011P...</msg>
<status status="PASS" endtime="20180607 09:10:01.229" starttime="20180607 09:09:55.042"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:06.818" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.410000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:06.819" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:06.819" starttime="20180607 09:10:01.229"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.819" starttime="20180607 09:10:06.819"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.819" starttime="20180607 09:10:06.819"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:10:06.821" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:10:06.821" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:06.821" starttime="20180607 09:10:06.820"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:10:06.822" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:10:06.822" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:06.822" starttime="20180607 09:10:06.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.823" starttime="20180607 09:10:06.822"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.823" starttime="20180607 09:10:06.823"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:06.849" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:06.849" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.440000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:06.849" starttime="20180607 09:10:06.824"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:06.849" starttime="20180607 09:10:06.823"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:06.850" starttime="20180607 09:10:06.823"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:06.862" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:06.862" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.450000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:06.863" starttime="20180607 09:10:06.850"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:06.863" starttime="20180607 09:10:06.850"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:06.863" starttime="20180607 09:10:06.850"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:06.863" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:10:06.863" starttime="20180607 09:10:06.863"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:06.864" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:10:06.864" starttime="20180607 09:10:06.863"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:06.864" starttime="20180607 09:09:54.846"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:06.864" critical="yes" starttime="20180607 09:09:54.846"></status>
</test>
<test id="s1-s1-t13" name="TC01.011">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:10:06.871" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:10:06.872" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:06.872" starttime="20180607 09:10:06.870"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.872" starttime="20180607 09:10:06.872"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.872" starttime="20180607 09:10:06.872"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:10:06.873" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:10:06.874" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180607 09:10:06.874" starttime="20180607 09:10:06.873"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:10:06.875" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:10:06.875" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:06.875" starttime="20180607 09:10:06.874"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.884" starttime="20180607 09:10:06.875"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.894" starttime="20180607 09:10:06.885"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:06.899" starttime="20180607 09:10:06.895"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:10:06.977" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.530000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:06.977" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:06.977" starttime="20180607 09:10:06.899"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:11.210" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.530000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:11.210" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:10:11.210" starttime="20180607 09:10:06.978"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:15.790" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.540000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:15.791" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:15.791" starttime="20180607 09:10:11.211"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.791" starttime="20180607 09:10:15.791"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.792" starttime="20180607 09:10:15.791"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:10:15.793" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:10:15.793" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180607 09:10:15.793" starttime="20180607 09:10:15.792"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:10:15.794" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:10:15.794" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:15.794" starttime="20180607 09:10:15.793"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.795" starttime="20180607 09:10:15.794"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.795" starttime="20180607 09:10:15.795"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:15.797" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.797" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.798" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.798" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.808" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:15.808" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.560000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:15.809" starttime="20180607 09:10:15.796"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:15.809" starttime="20180607 09:10:15.795"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:15.810" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.811" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.811" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.811" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.811" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.811" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:15.830" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:15.830" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.580000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:15.831" starttime="20180607 09:10:15.809"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:15.831" starttime="20180607 09:10:15.809"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:15.831" starttime="20180607 09:10:15.795"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:15.843" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:15.843" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.600000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:15.843" starttime="20180607 09:10:15.831"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:15.843" starttime="20180607 09:10:15.831"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:15.843" starttime="20180607 09:10:15.831"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:15.844" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:10:15.844" starttime="20180607 09:10:15.843"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:15.844" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:10:15.844" starttime="20180607 09:10:15.844"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:15.844" starttime="20180607 09:10:06.870"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:15.845" critical="yes" starttime="20180607 09:10:06.869"></status>
</test>
<test id="s1-s1-t14" name="TC01.012.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:10:15.852" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:10:15.852" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:15.852" starttime="20180607 09:10:15.851"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.853" starttime="20180607 09:10:15.852"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.853" starttime="20180607 09:10:15.853"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:10:15.854" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:10:15.854" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:15.854" starttime="20180607 09:10:15.853"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:10:15.855" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:10:15.855" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:15.855" starttime="20180607 09:10:15.854"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.864" starttime="20180607 09:10:15.856"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.870" starttime="20180607 09:10:15.865"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:15.878" starttime="20180607 09:10:15.871"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:10:16.025" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.720000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:16.026" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:16.026" starttime="20180607 09:10:15.878"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:21.175" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.720000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:21.176" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01012P...</msg>
<status status="PASS" endtime="20180607 09:10:21.176" starttime="20180607 09:10:16.026"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:24.803" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.730000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:24.803" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:24.803" starttime="20180607 09:10:21.176"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.804" starttime="20180607 09:10:24.803"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.804" starttime="20180607 09:10:24.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:10:24.805" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:10:24.805" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:24.805" starttime="20180607 09:10:24.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:10:24.806" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:10:24.807" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:24.807" starttime="20180607 09:10:24.806"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.807" starttime="20180607 09:10:24.807"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.807" starttime="20180607 09:10:24.807"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:24.833" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:24.833" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.760000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:24.833" starttime="20180607 09:10:24.808"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:24.833" starttime="20180607 09:10:24.808"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:24.834" starttime="20180607 09:10:24.808"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:24.846" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:24.847" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.770000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:24.847" starttime="20180607 09:10:24.834"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:24.847" starttime="20180607 09:10:24.834"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:24.847" starttime="20180607 09:10:24.834"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:24.847" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:10:24.847" starttime="20180607 09:10:24.847"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:24.848" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:10:24.848" starttime="20180607 09:10:24.848"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:24.848" starttime="20180607 09:10:15.850"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:24.848" critical="yes" starttime="20180607 09:10:15.850"></status>
</test>
<test id="s1-s1-t15" name="TC01.012">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:10:24.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:10:24.856" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:24.856" starttime="20180607 09:10:24.855"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.856" starttime="20180607 09:10:24.856"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.857" starttime="20180607 09:10:24.856"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:10:24.858" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:10:24.858" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180607 09:10:24.858" starttime="20180607 09:10:24.857"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:10:24.859" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:10:24.859" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:24.859" starttime="20180607 09:10:24.858"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.868" starttime="20180607 09:10:24.859"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.886" starttime="20180607 09:10:24.869"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:24.889" starttime="20180607 09:10:24.887"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:10:25.004" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.870000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:25.004" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:25.005" starttime="20180607 09:10:24.889"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:31.189" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.880000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:31.189" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:10:31.189" starttime="20180607 09:10:25.005"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:36.821" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.880000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:36.822" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:36.822" starttime="20180607 09:10:31.189"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.823" starttime="20180607 09:10:36.822"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.823" starttime="20180607 09:10:36.823"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:10:36.824" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:10:36.824" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180607 09:10:36.824" starttime="20180607 09:10:36.823"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:10:36.825" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:10:36.826" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:36.826" starttime="20180607 09:10:36.825"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.826" starttime="20180607 09:10:36.826"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.826" starttime="20180607 09:10:36.826"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:36.829" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.829" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.829" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.829" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.840" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:36.840" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.900000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:36.840" starttime="20180607 09:10:36.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:36.840" starttime="20180607 09:10:36.827"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:36.842" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.842" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.842" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.843" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.843" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.843" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:36.861" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:36.862" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.920000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:36.862" starttime="20180607 09:10:36.841"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:36.862" starttime="20180607 09:10:36.840"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:36.862" starttime="20180607 09:10:36.826"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:36.874" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:36.874" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.930000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:36.874" starttime="20180607 09:10:36.862"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:36.874" starttime="20180607 09:10:36.862"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:36.874" starttime="20180607 09:10:36.862"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:36.875" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:10:36.875" starttime="20180607 09:10:36.874"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:36.875" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:10:36.875" starttime="20180607 09:10:36.875"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:36.875" starttime="20180607 09:10:24.854"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:36.876" critical="yes" starttime="20180607 09:10:24.854"></status>
</test>
<test id="s1-s1-t16" name="TC01.013.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:10:36.883" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:10:36.883" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:36.883" starttime="20180607 09:10:36.882"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.884" starttime="20180607 09:10:36.883"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.884" starttime="20180607 09:10:36.884"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:10:36.885" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:10:36.885" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:36.885" starttime="20180607 09:10:36.884"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:10:36.886" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:10:36.886" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:36.886" starttime="20180607 09:10:36.885"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.895" starttime="20180607 09:10:36.887"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.901" starttime="20180607 09:10:36.896"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:36.904" starttime="20180607 09:10:36.902"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:10:37.028" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.030000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:37.028" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:37.029" starttime="20180607 09:10:36.904"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:40.805" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.040000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:40.806" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01013P...</msg>
<status status="PASS" endtime="20180607 09:10:40.806" starttime="20180607 09:10:37.029"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:45.786" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.040000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:45.786" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:45.787" starttime="20180607 09:10:40.806"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.787" starttime="20180607 09:10:45.787"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.787" starttime="20180607 09:10:45.787"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:10:45.789" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:10:45.789" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:45.789" starttime="20180607 09:10:45.788"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:10:45.790" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:10:45.790" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:45.790" starttime="20180607 09:10:45.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.791" starttime="20180607 09:10:45.790"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.791" starttime="20180607 09:10:45.791"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:45.817" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:45.817" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.070000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:45.817" starttime="20180607 09:10:45.792"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:45.817" starttime="20180607 09:10:45.791"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:45.817" starttime="20180607 09:10:45.791"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:45.829" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:45.829" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.080000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:45.829" starttime="20180607 09:10:45.818"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:45.829" starttime="20180607 09:10:45.818"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:45.830" starttime="20180607 09:10:45.817"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:45.830" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:10:45.830" starttime="20180607 09:10:45.830"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:45.830" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:10:45.831" starttime="20180607 09:10:45.830"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:45.831" starttime="20180607 09:10:36.881"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:45.831" critical="yes" starttime="20180607 09:10:36.881"></status>
</test>
<test id="s1-s1-t17" name="TC01.013">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:10:45.838" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:10:45.838" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:45.839" starttime="20180607 09:10:45.837"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.839" starttime="20180607 09:10:45.839"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.839" starttime="20180607 09:10:45.839"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:10:45.840" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:10:45.840" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180607 09:10:45.840" starttime="20180607 09:10:45.839"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:10:45.842" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:10:45.842" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:45.842" starttime="20180607 09:10:45.841"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.850" starttime="20180607 09:10:45.842"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.862" starttime="20180607 09:10:45.852"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:45.866" starttime="20180607 09:10:45.863"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:10:45.928" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.150000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:45.928" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:45.928" starttime="20180607 09:10:45.866"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:51.359" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.150000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:51.360" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:10:51.360" starttime="20180607 09:10:45.929"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:10:54.786" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.160000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:54.786" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:54.786" starttime="20180607 09:10:51.361"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.787" starttime="20180607 09:10:54.786"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.787" starttime="20180607 09:10:54.787"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:10:54.788" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:10:54.788" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180607 09:10:54.788" starttime="20180607 09:10:54.787"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:10:54.790" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:10:54.790" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:10:54.790" starttime="20180607 09:10:54.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.790" starttime="20180607 09:10:54.790"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.790" starttime="20180607 09:10:54.790"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:54.793" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.793" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.793" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.793" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.803" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:54.804" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.180000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:54.804" starttime="20180607 09:10:54.791"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:54.804" starttime="20180607 09:10:54.791"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:54.806" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.806" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.806" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.806" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.806" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.806" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:10:54.826" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:54.826" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.200000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:54.827" starttime="20180607 09:10:54.804"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:54.827" starttime="20180607 09:10:54.804"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:54.827" starttime="20180607 09:10:54.791"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:10:54.839" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:10:54.839" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.210000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:10:54.839" starttime="20180607 09:10:54.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:54.839" starttime="20180607 09:10:54.827"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:54.839" starttime="20180607 09:10:54.827"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:54.839" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:10:54.839" starttime="20180607 09:10:54.839"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:10:54.840" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:10:54.840" starttime="20180607 09:10:54.840"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:54.840" starttime="20180607 09:10:45.837"></status>
</kw>
<status status="PASS" endtime="20180607 09:10:54.840" critical="yes" starttime="20180607 09:10:45.836"></status>
</test>
<test id="s1-s1-t18" name="TC01.031.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:10:54.848" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:10:54.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:54.848" starttime="20180607 09:10:54.847"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.848" starttime="20180607 09:10:54.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.849" starttime="20180607 09:10:54.848"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:10:54.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:10:54.850" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:54.850" starttime="20180607 09:10:54.849"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:10:54.851" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:10:54.851" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:10:54.851" starttime="20180607 09:10:54.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.860" starttime="20180607 09:10:54.851"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.866" starttime="20180607 09:10:54.861"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:10:54.870" starttime="20180607 09:10:54.867"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:10:55.008" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.330000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:10:55.008" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:10:55.009" starttime="20180607 09:10:54.870"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:11:01.141" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.330000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:11:01.142" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01031P...</msg>
<status status="PASS" endtime="20180607 09:11:01.142" starttime="20180607 09:10:55.009"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:11:07.327" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.340000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:11:07.328" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:11:07.328" starttime="20180607 09:11:01.142"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.328" starttime="20180607 09:11:07.328"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.328" starttime="20180607 09:11:07.328"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:11:07.330" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:11:07.330" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:11:07.330" starttime="20180607 09:11:07.329"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:11:07.331" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:11:07.331" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:11:07.331" starttime="20180607 09:11:07.330"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.331" starttime="20180607 09:11:07.331"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.332" starttime="20180607 09:11:07.332"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01031PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:11:07.357" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:11:07.357" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.370000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:11:07.357" starttime="20180607 09:11:07.332"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:07.357" starttime="20180607 09:11:07.332"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:07.357" starttime="20180607 09:11:07.332"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:11:07.369" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:11:07.369" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.390000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:11:07.369" starttime="20180607 09:11:07.358"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:07.369" starttime="20180607 09:11:07.357"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:07.369" starttime="20180607 09:11:07.357"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:11:07.370" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:11:07.370" starttime="20180607 09:11:07.370"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:11:07.370" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:11:07.371" starttime="20180607 09:11:07.370"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:07.371" starttime="20180607 09:10:54.846"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:07.371" critical="yes" starttime="20180607 09:10:54.846"></status>
</test>
<test id="s1-s1-t19" name="TC01.031">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_CancelRS[@TimeStamp]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:11:07.378" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:11:07.378" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRQ1-EXPcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:11:07.379" starttime="20180607 09:11:07.377"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.379" starttime="20180607 09:11:07.379"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.379" starttime="20180607 09:11:07.379"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:11:07.380" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:11:07.380" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-BWcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:11:07.380" starttime="20180607 09:11:07.379"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:11:07.381" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:11:07.382" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:11:07.382" starttime="20180607 09:11:07.381"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.390" starttime="20180607 09:11:07.382"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.401" starttime="20180607 09:11:07.391"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:07.404" starttime="20180607 09:11:07.402"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:11:07.700" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.580000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:11:07.700" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:11:07.700" starttime="20180607 09:11:07.404"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:11:10.776" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.580000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:11:10.776" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:11:10.776" starttime="20180607 09:11:07.701"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:11:15.814" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/4.590000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:11:15.814" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:11:15.814" starttime="20180607 09:11:10.777"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:15.815" starttime="20180607 09:11:15.815"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:15.815" starttime="20180607 09:11:15.815"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:11:15.816" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:11:15.817" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:11:15.817" starttime="20180607 09:11:15.815"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:11:15.818" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:11:15.818" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:11:15.818" starttime="20180607 09:11:15.817"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:15.818" starttime="20180607 09:11:15.818"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:11:15.819" starttime="20180607 09:11:15.819"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:11:15.832" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:11:15.832" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.620000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:11:15.833" starttime="20180607 09:11:15.819"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:15.833" starttime="20180607 09:11:15.819"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:15.833" starttime="20180607 09:11:15.819"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:11:15.846" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:11:15.846" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/4.640000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:11:15.846" starttime="20180607 09:11:15.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:15.846" starttime="20180607 09:11:15.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:15.846" starttime="20180607 09:11:15.833"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:11:15.847" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:11:15.847" starttime="20180607 09:11:15.846"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:11:15.847" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:11:15.847" starttime="20180607 09:11:15.847"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:15.847" starttime="20180607 09:11:07.377"></status>
</kw>
<status status="PASS" endtime="20180607 09:11:15.848" critical="yes" starttime="20180607 09:11:07.376"></status>
</test>
<status status="PASS" endtime="20180607 09:11:15.854" starttime="20180607 09:08:02.069"></status>
</suite>
<status status="PASS" endtime="20180607 09:11:15.861" starttime="20180607 09:08:01.725"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="19">Critical Tests</stat>
<stat fail="0" pass="19">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="Bw-Exp" pass="19">Bw-Exp</stat>
<stat fail="0" id="s1-s1" name="Expedia-BW-Booking" pass="19">Bw-Exp.Expedia-BW-Booking</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
