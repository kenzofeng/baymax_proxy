<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180607 09:14:48.762" generator="Robot 3.0.2 (Python 2.7.10 on linux2)">
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp" id="s1" name="Bw-Exp">
<kw type="setup" name="start">
<kw name="Stop Server" library="Doraemon">
<doc>Examples:</doc>
<arguments>
<arg>9011</arg>
<arg>8011</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.093" starttime="20180607 09:14:49.064"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/BWDataClear.sql</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.094" starttime="20180607 09:14:49.094"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>DB Execute Sql</arg>
<arg>./Expedia-BW-Booking/EXPDataClear.sql</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.094" starttime="20180607 09:14:49.094"></status>
</kw>
<kw name="ClearBW">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE bestwestern_adapter;DELETE FROM reservation_room_stay;DELETE FROM reservation_entity;DELETE FROM reservation_event;</arg>
<arg>host=172.27.0.184</arg>
</arguments>
<msg timestamp="20180607 09:14:49.099" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180607 09:14:49.099" starttime="20180607 09:14:49.095"></status>
</kw>
<status status="PASS" endtime="20180607 09:14:49.099" starttime="20180607 09:14:49.094"></status>
</kw>
<kw name="ClearEXP">
<kw name="DB Execute Sql String" library="Doraemon">
<doc>Default Value:</doc>
<arguments>
<arg>USE expedia_endpoint;DELETE FROM reservation;DELETE FROM notify_task;DELETE FROM callback_task;</arg>
<arg>host=172.27.0.63</arg>
</arguments>
<msg timestamp="20180607 09:14:49.102" level="INFO">DB Execute Sql String is successfully</msg>
<status status="PASS" endtime="20180607 09:14:49.102" starttime="20180607 09:14:49.100"></status>
</kw>
<status status="PASS" endtime="20180607 09:14:49.102" starttime="20180607 09:14:49.099"></status>
</kw>
<status status="PASS" endtime="20180607 09:14:49.103" starttime="20180607 09:14:49.064"></status>
</kw>
<suite source="/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking.txt" id="s1-s1" name="Expedia-BW-Booking">
<test id="s1-s1-t1" name="TC01.001">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:14:49.110" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:14:49.111" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:14:49.111" starttime="20180607 09:14:49.109"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.111" starttime="20180607 09:14:49.111"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.111" starttime="20180607 09:14:49.111"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:14:49.112" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:14:49.113" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:14:49.113" starttime="20180607 09:14:49.111"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:14:49.114" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:14:49.114" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:14:49.114" starttime="20180607 09:14:49.113"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.126" starttime="20180607 09:14:49.114"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.131" starttime="20180607 09:14:49.127"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:14:49.135" starttime="20180607 09:14:49.132"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:14:49.212" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.530000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:14:49.213" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:14:49.213" starttime="20180607 09:14:49.136"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:14:56.198" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.540000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:14:56.198" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01001"...</msg>
<status status="PASS" endtime="20180607 09:14:56.198" starttime="20180607 09:14:49.213"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:06.797" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.550000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:06.798" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:06.798" starttime="20180607 09:14:56.199"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.798" starttime="20180607 09:15:06.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.798" starttime="20180607 09:15:06.798"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:15:06.800" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:15:06.800" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:06.800" starttime="20180607 09:15:06.799"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:15:06.801" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001</msg>
<msg timestamp="20180607 09:15:06.802" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:06.802" starttime="20180607 09:15:06.800"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.802" starttime="20180607 09:15:06.802"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.802" starttime="20180607 09:15:06.802"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01001&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:06.943" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:06.943" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.700000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:06.943" starttime="20180607 09:15:06.803"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:06.943" starttime="20180607 09:15:06.803"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:06.943" starttime="20180607 09:15:06.803"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.001/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:06.956" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:06.956" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.720000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:06.957" starttime="20180607 09:15:06.944"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:06.957" starttime="20180607 09:15:06.944"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:06.957" starttime="20180607 09:15:06.943"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:06.957" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:06.957" starttime="20180607 09:15:06.957"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:06.958" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:06.958" starttime="20180607 09:15:06.957"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:06.958" starttime="20180607 09:14:49.108"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:06.958" critical="yes" starttime="20180607 09:14:49.108"></status>
</test>
<test id="s1-s1-t2" name="TC01.002">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:15:06.965" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:15:06.966" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:06.966" starttime="20180607 09:15:06.964"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.966" starttime="20180607 09:15:06.966"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.967" starttime="20180607 09:15:06.966"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:15:06.968" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:15:06.968" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:06.968" starttime="20180607 09:15:06.967"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:15:06.969" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:15:06.969" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:06.969" starttime="20180607 09:15:06.968"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.979" starttime="20180607 09:15:06.970"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.986" starttime="20180607 09:15:06.980"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:06.988" starttime="20180607 09:15:06.987"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:15:07.046" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.770000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:07.047" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:07.047" starttime="20180607 09:15:06.989"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:10.726" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.780000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:10.726" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01002"...</msg>
<status status="PASS" endtime="20180607 09:15:10.726" starttime="20180607 09:15:07.047"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:15.808" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.790000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:15.809" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:15.809" starttime="20180607 09:15:10.727"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.809" starttime="20180607 09:15:15.809"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.810" starttime="20180607 09:15:15.809"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:15:15.811" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:15:15.811" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:15.811" starttime="20180607 09:15:15.810"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:15:15.812" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002</msg>
<msg timestamp="20180607 09:15:15.813" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:15.813" starttime="20180607 09:15:15.812"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.813" starttime="20180607 09:15:15.813"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.813" starttime="20180607 09:15:15.813"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01002&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:15.840" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:15.841" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.820000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:15.841" starttime="20180607 09:15:15.814"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:15.841" starttime="20180607 09:15:15.814"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:15.841" starttime="20180607 09:15:15.814"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.002/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:15.853" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:15.853" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.830000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:15.853" starttime="20180607 09:15:15.841"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:15.853" starttime="20180607 09:15:15.841"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:15.853" starttime="20180607 09:15:15.841"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:15.854" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:15.854" starttime="20180607 09:15:15.853"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:15.854" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:15.854" starttime="20180607 09:15:15.854"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:15.854" starttime="20180607 09:15:06.964"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:15.855" critical="yes" starttime="20180607 09:15:06.963"></status>
</test>
<test id="s1-s1-t3" name="TC01.003">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:15:15.862" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:15:15.862" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:15.862" starttime="20180607 09:15:15.861"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.862" starttime="20180607 09:15:15.862"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.863" starttime="20180607 09:15:15.863"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:15:15.864" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:15:15.864" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:15.864" starttime="20180607 09:15:15.863"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:15:15.865" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:15:15.865" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:15.865" starttime="20180607 09:15:15.864"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.874" starttime="20180607 09:15:15.866"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.881" starttime="20180607 09:15:15.875"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:15.885" starttime="20180607 09:15:15.882"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:15:15.940" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.900000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:15.940" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:15.940" starttime="20180607 09:15:15.885"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:21.222" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.900000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:21.224" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01003"...</msg>
<status status="PASS" endtime="20180607 09:15:21.224" starttime="20180607 09:15:15.941"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:24.801" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/0.900000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:24.801" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:24.801" starttime="20180607 09:15:21.224"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.802" starttime="20180607 09:15:24.802"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.802" starttime="20180607 09:15:24.802"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:15:24.803" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:15:24.804" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:24.804" starttime="20180607 09:15:24.802"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:15:24.805" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003</msg>
<msg timestamp="20180607 09:15:24.805" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:24.805" starttime="20180607 09:15:24.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.805" starttime="20180607 09:15:24.805"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.806" starttime="20180607 09:15:24.805"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01003&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:24.837" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:24.837" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.940000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:24.837" starttime="20180607 09:15:24.806"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:24.838" starttime="20180607 09:15:24.806"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:24.838" starttime="20180607 09:15:24.806"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.003/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:24.850" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:24.850" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/0.950000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:24.850" starttime="20180607 09:15:24.838"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:24.850" starttime="20180607 09:15:24.838"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:24.850" starttime="20180607 09:15:24.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:24.851" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:24.851" starttime="20180607 09:15:24.850"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:24.851" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:24.851" starttime="20180607 09:15:24.851"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:24.852" starttime="20180607 09:15:15.860"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:24.852" critical="yes" starttime="20180607 09:15:15.860"></status>
</test>
<test id="s1-s1-t4" name="TC01.004">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:15:24.859" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:15:24.859" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:24.860" starttime="20180607 09:15:24.858"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.860" starttime="20180607 09:15:24.860"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.860" starttime="20180607 09:15:24.860"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:15:24.861" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:15:24.861" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:24.861" starttime="20180607 09:15:24.860"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:15:24.862" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:15:24.863" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:24.863" starttime="20180607 09:15:24.862"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.871" starttime="20180607 09:15:24.863"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.879" starttime="20180607 09:15:24.873"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:24.881" starttime="20180607 09:15:24.880"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:15:24.984" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.040000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:24.984" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:24.984" starttime="20180607 09:15:24.882"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:31.173" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.050000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:31.174" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01004"...</msg>
<status status="PASS" endtime="20180607 09:15:31.174" starttime="20180607 09:15:24.985"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:36.806" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:36.806" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:36.806" starttime="20180607 09:15:31.174"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.807" starttime="20180607 09:15:36.806"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.807" starttime="20180607 09:15:36.807"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:15:36.808" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:15:36.809" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:36.809" starttime="20180607 09:15:36.807"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:15:36.810" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004</msg>
<msg timestamp="20180607 09:15:36.810" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:36.810" starttime="20180607 09:15:36.809"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.810" starttime="20180607 09:15:36.810"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.811" starttime="20180607 09:15:36.810"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01004&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:36.836" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:36.836" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.090000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:36.836" starttime="20180607 09:15:36.811"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:36.837" starttime="20180607 09:15:36.811"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:36.837" starttime="20180607 09:15:36.811"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.004/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:36.849" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:36.849" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.100000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:36.849" starttime="20180607 09:15:36.837"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:36.849" starttime="20180607 09:15:36.837"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:36.849" starttime="20180607 09:15:36.837"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:36.849" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:36.850" starttime="20180607 09:15:36.849"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:36.850" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:36.850" starttime="20180607 09:15:36.850"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:36.850" starttime="20180607 09:15:24.858"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:36.850" critical="yes" starttime="20180607 09:15:24.857"></status>
</test>
<test id="s1-s1-t5" name="TC01.005">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:15:36.858" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:15:36.858" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:36.858" starttime="20180607 09:15:36.857"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.858" starttime="20180607 09:15:36.858"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.859" starttime="20180607 09:15:36.858"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:15:36.860" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:15:36.860" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:36.860" starttime="20180607 09:15:36.859"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:15:36.861" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:15:36.861" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:36.861" starttime="20180607 09:15:36.860"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.869" starttime="20180607 09:15:36.861"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.876" starttime="20180607 09:15:36.870"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:36.883" starttime="20180607 09:15:36.876"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:15:36.944" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.180000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:36.945" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:36.945" starttime="20180607 09:15:36.883"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:41.174" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.180000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:41.175" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01005"...</msg>
<status status="PASS" endtime="20180607 09:15:41.175" starttime="20180607 09:15:36.945"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:45.804" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.190000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:45.804" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:45.804" starttime="20180607 09:15:41.175"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.805" starttime="20180607 09:15:45.805"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.805" starttime="20180607 09:15:45.805"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:15:45.806" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:15:45.807" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:45.807" starttime="20180607 09:15:45.805"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:15:45.808" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005</msg>
<msg timestamp="20180607 09:15:45.808" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:45.808" starttime="20180607 09:15:45.807"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.808" starttime="20180607 09:15:45.808"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.809" starttime="20180607 09:15:45.808"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01005&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:45.834" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:45.834" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.220000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:45.835" starttime="20180607 09:15:45.809"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:45.835" starttime="20180607 09:15:45.809"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:45.835" starttime="20180607 09:15:45.809"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.005/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:45.847" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:45.847" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.230000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:45.847" starttime="20180607 09:15:45.835"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:45.847" starttime="20180607 09:15:45.835"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:45.847" starttime="20180607 09:15:45.835"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:45.848" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:45.848" starttime="20180607 09:15:45.848"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:45.848" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:45.849" starttime="20180607 09:15:45.848"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:45.849" starttime="20180607 09:15:36.856"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:45.849" critical="yes" starttime="20180607 09:15:36.856"></status>
</test>
<test id="s1-s1-t6" name="TC01.006">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:15:45.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:15:45.857" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:45.857" starttime="20180607 09:15:45.855"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.857" starttime="20180607 09:15:45.857"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.857" starttime="20180607 09:15:45.857"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:15:45.858" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:15:45.859" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:45.859" starttime="20180607 09:15:45.857"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:15:45.860" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:15:45.860" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:45.860" starttime="20180607 09:15:45.859"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.869" starttime="20180607 09:15:45.860"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.875" starttime="20180607 09:15:45.870"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:45.877" starttime="20180607 09:15:45.876"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:15:45.988" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.330000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:45.988" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:45.988" starttime="20180607 09:15:45.877"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:51.168" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.340000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:51.169" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01006"...</msg>
<status status="PASS" endtime="20180607 09:15:51.169" starttime="20180607 09:15:45.989"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:15:54.795" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.340000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:54.795" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:54.795" starttime="20180607 09:15:51.169"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.796" starttime="20180607 09:15:54.795"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.796" starttime="20180607 09:15:54.796"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:15:54.797" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:15:54.798" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:54.798" starttime="20180607 09:15:54.796"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:15:54.799" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006</msg>
<msg timestamp="20180607 09:15:54.799" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:15:54.799" starttime="20180607 09:15:54.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.799" starttime="20180607 09:15:54.799"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.800" starttime="20180607 09:15:54.799"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01006&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:54.825" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:54.826" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.370000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:54.826" starttime="20180607 09:15:54.800"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:54.826" starttime="20180607 09:15:54.800"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:54.826" starttime="20180607 09:15:54.800"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.006/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:15:54.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:15:54.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.390000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:15:54.838" starttime="20180607 09:15:54.826"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:54.838" starttime="20180607 09:15:54.826"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:54.839" starttime="20180607 09:15:54.826"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:54.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:54.839" starttime="20180607 09:15:54.839"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:15:54.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:15:54.840" starttime="20180607 09:15:54.839"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:54.840" starttime="20180607 09:15:45.855"></status>
</kw>
<status status="PASS" endtime="20180607 09:15:54.840" critical="yes" starttime="20180607 09:15:45.854"></status>
</test>
<test id="s1-s1-t7" name="TC01.007">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:15:54.847" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:15:54.848" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:54.848" starttime="20180607 09:15:54.846"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.848" starttime="20180607 09:15:54.848"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.848" starttime="20180607 09:15:54.848"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:15:54.849" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:15:54.849" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:54.849" starttime="20180607 09:15:54.848"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:15:54.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:15:54.851" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:15:54.851" starttime="20180607 09:15:54.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.859" starttime="20180607 09:15:54.851"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.865" starttime="20180607 09:15:54.860"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:15:54.871" starttime="20180607 09:15:54.866"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:15:54.936" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.470000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:15:54.937" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:15:54.937" starttime="20180607 09:15:54.872"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:01.170" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.470000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:01.170" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01007"...</msg>
<status status="PASS" endtime="20180607 09:16:01.170" starttime="20180607 09:15:54.937"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:06.803" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.480000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:06.803" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:06.803" starttime="20180607 09:16:01.171"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.804" starttime="20180607 09:16:06.803"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.804" starttime="20180607 09:16:06.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:16:06.805" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:16:06.805" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:06.805" starttime="20180607 09:16:06.804"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:16:06.806" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007</msg>
<msg timestamp="20180607 09:16:06.807" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:06.807" starttime="20180607 09:16:06.805"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.807" starttime="20180607 09:16:06.807"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.807" starttime="20180607 09:16:06.807"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01007&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:06.833" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:06.833" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.500000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:06.833" starttime="20180607 09:16:06.808"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:06.833" starttime="20180607 09:16:06.808"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:06.833" starttime="20180607 09:16:06.807"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.007/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:06.846" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:06.846" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.520000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:06.846" starttime="20180607 09:16:06.834"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:06.846" starttime="20180607 09:16:06.834"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:06.846" starttime="20180607 09:16:06.833"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:06.847" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:06.847" starttime="20180607 09:16:06.846"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:06.847" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:06.847" starttime="20180607 09:16:06.847"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:06.847" starttime="20180607 09:15:54.846"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:06.848" critical="yes" starttime="20180607 09:15:54.845"></status>
</test>
<test id="s1-s1-t8" name="TC01.008">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:16:06.855" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:16:06.855" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:06.855" starttime="20180607 09:16:06.854"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.855" starttime="20180607 09:16:06.855"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.856" starttime="20180607 09:16:06.856"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:16:06.857" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:16:06.857" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:06.857" starttime="20180607 09:16:06.856"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:16:06.858" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:16:06.858" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:06.858" starttime="20180607 09:16:06.857"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.867" starttime="20180607 09:16:06.858"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.873" starttime="20180607 09:16:06.868"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:06.876" starttime="20180607 09:16:06.874"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:16:06.940" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.580000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:06.940" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:06.940" starttime="20180607 09:16:06.876"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:11.169" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.590000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:11.170" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01008"...</msg>
<status status="PASS" endtime="20180607 09:16:11.170" starttime="20180607 09:16:06.941"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:15.800" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.600000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:15.800" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:15.801" starttime="20180607 09:16:11.170"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.801" starttime="20180607 09:16:15.801"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.801" starttime="20180607 09:16:15.801"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:16:15.803" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:16:15.803" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:15.803" starttime="20180607 09:16:15.801"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:16:15.804" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008</msg>
<msg timestamp="20180607 09:16:15.804" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:15.804" starttime="20180607 09:16:15.803"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.805" starttime="20180607 09:16:15.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.805" starttime="20180607 09:16:15.805"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01008&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:15.832" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:15.832" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.630000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:15.833" starttime="20180607 09:16:15.806"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:15.833" starttime="20180607 09:16:15.805"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:15.833" starttime="20180607 09:16:15.805"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.008/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:15.845" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:15.845" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.650000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:15.845" starttime="20180607 09:16:15.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:15.845" starttime="20180607 09:16:15.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:15.845" starttime="20180607 09:16:15.833"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:15.846" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:15.846" starttime="20180607 09:16:15.845"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:15.846" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:15.846" starttime="20180607 09:16:15.846"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:15.846" starttime="20180607 09:16:06.853"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:15.847" critical="yes" starttime="20180607 09:16:06.853"></status>
</test>
<test id="s1-s1-t9" name="TC01.009">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:16:15.854" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:16:15.854" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:15.854" starttime="20180607 09:16:15.853"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.854" starttime="20180607 09:16:15.854"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.855" starttime="20180607 09:16:15.855"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:16:15.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:16:15.856" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:15.856" starttime="20180607 09:16:15.855"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:16:15.857" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:16:15.857" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:15.857" starttime="20180607 09:16:15.856"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.866" starttime="20180607 09:16:15.858"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.877" starttime="20180607 09:16:15.867"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:15.881" starttime="20180607 09:16:15.878"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:16:15.940" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.710000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:15.940" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:15.941" starttime="20180607 09:16:15.881"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:21.123" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.720000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:21.124" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01009"...</msg>
<status status="PASS" endtime="20180607 09:16:21.124" starttime="20180607 09:16:15.941"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:24.801" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.730000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:24.801" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:24.801" starttime="20180607 09:16:21.124"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.802" starttime="20180607 09:16:24.802"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.802" starttime="20180607 09:16:24.802"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:16:24.803" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:16:24.804" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:24.804" starttime="20180607 09:16:24.802"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:16:24.805" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009</msg>
<msg timestamp="20180607 09:16:24.805" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:24.805" starttime="20180607 09:16:24.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.805" starttime="20180607 09:16:24.805"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.806" starttime="20180607 09:16:24.805"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01009&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:24.830" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:24.831" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.760000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:24.831" starttime="20180607 09:16:24.806"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:24.831" starttime="20180607 09:16:24.806"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:24.831" starttime="20180607 09:16:24.806"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.009/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:24.844" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:24.844" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.770000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:24.844" starttime="20180607 09:16:24.832"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:24.844" starttime="20180607 09:16:24.831"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:24.844" starttime="20180607 09:16:24.831"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:24.845" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:24.845" starttime="20180607 09:16:24.844"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:24.845" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:24.845" starttime="20180607 09:16:24.845"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:24.845" starttime="20180607 09:16:15.852"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:24.846" critical="yes" starttime="20180607 09:16:15.852"></status>
</test>
<test id="s1-s1-t10" name="TC01.010.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:16:24.853" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:16:24.853" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:24.853" starttime="20180607 09:16:24.852"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.854" starttime="20180607 09:16:24.853"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.854" starttime="20180607 09:16:24.854"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:16:24.855" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:16:24.855" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:24.855" starttime="20180607 09:16:24.854"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:16:24.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:16:24.857" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:24.857" starttime="20180607 09:16:24.855"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.865" starttime="20180607 09:16:24.857"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.881" starttime="20180607 09:16:24.866"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:24.896" starttime="20180607 09:16:24.882"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:16:25.009" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.860000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:25.010" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:25.010" starttime="20180607 09:16:24.897"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:30.745" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.870000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:30.746" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010P...</msg>
<status status="PASS" endtime="20180607 09:16:30.746" starttime="20180607 09:16:25.010"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:36.780" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.880000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:36.780" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:36.780" starttime="20180607 09:16:30.746"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.781" starttime="20180607 09:16:36.780"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.781" starttime="20180607 09:16:36.781"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:16:36.782" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:16:36.782" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:36.782" starttime="20180607 09:16:36.781"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:16:36.784" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE</msg>
<msg timestamp="20180607 09:16:36.784" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:36.784" starttime="20180607 09:16:36.783"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.784" starttime="20180607 09:16:36.784"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.784" starttime="20180607 09:16:36.784"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:36.810" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:36.810" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.910000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:36.810" starttime="20180607 09:16:36.785"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:36.810" starttime="20180607 09:16:36.785"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:36.810" starttime="20180607 09:16:36.785"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:36.823" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:36.823" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/1.920000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:36.823" starttime="20180607 09:16:36.811"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:36.823" starttime="20180607 09:16:36.811"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:36.823" starttime="20180607 09:16:36.810"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:36.823" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:36.823" starttime="20180607 09:16:36.823"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:36.824" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:36.824" starttime="20180607 09:16:36.824"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:36.824" starttime="20180607 09:16:24.851"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:36.824" critical="yes" starttime="20180607 09:16:24.851"></status>
</test>
<test id="s1-s1-t11" name="TC01.010">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:16:36.832" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:16:36.832" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:36.832" starttime="20180607 09:16:36.831"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.832" starttime="20180607 09:16:36.832"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.833" starttime="20180607 09:16:36.832"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:16:36.834" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:16:36.834" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:36.834" starttime="20180607 09:16:36.833"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:16:36.835" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:16:36.835" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:36.835" starttime="20180607 09:16:36.834"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.844" starttime="20180607 09:16:36.835"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.858" starttime="20180607 09:16:36.845"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:36.865" starttime="20180607 09:16:36.859"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:16:36.945" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/1.990000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:36.946" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:36.946" starttime="20180607 09:16:36.865"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:41.183" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.000000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:41.184" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01010M...</msg>
<status status="PASS" endtime="20180607 09:16:41.184" starttime="20180607 09:16:36.946"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:45.813" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.000000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:45.813" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:45.814" starttime="20180607 09:16:41.184"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.814" starttime="20180607 09:16:45.814"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.814" starttime="20180607 09:16:45.814"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:16:45.816" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:16:45.816" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:45.816" starttime="20180607 09:16:45.814"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:16:45.817" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010</msg>
<msg timestamp="20180607 09:16:45.817" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:45.817" starttime="20180607 09:16:45.816"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.817" starttime="20180607 09:16:45.817"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.818" starttime="20180607 09:16:45.818"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01010MOD..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-BWmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:45.843" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:45.843" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.030000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:45.844" starttime="20180607 09:16:45.818"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:45.844" starttime="20180607 09:16:45.818"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:45.844" starttime="20180607 09:16:45.818"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.010/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:45.856" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:45.856" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.050000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:45.856" starttime="20180607 09:16:45.844"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:45.856" starttime="20180607 09:16:45.844"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:45.856" starttime="20180607 09:16:45.844"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:45.857" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:45.857" starttime="20180607 09:16:45.856"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:45.857" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:45.857" starttime="20180607 09:16:45.857"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:45.858" starttime="20180607 09:16:36.830"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:45.858" critical="yes" starttime="20180607 09:16:36.830"></status>
</test>
<test id="s1-s1-t12" name="TC01.011.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:16:45.865" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:16:45.865" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:45.865" starttime="20180607 09:16:45.864"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.866" starttime="20180607 09:16:45.865"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.866" starttime="20180607 09:16:45.866"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:16:45.867" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:16:45.867" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:45.867" starttime="20180607 09:16:45.866"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:16:45.868" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:16:45.869" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:45.869" starttime="20180607 09:16:45.867"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.877" starttime="20180607 09:16:45.869"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.884" starttime="20180607 09:16:45.878"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:45.887" starttime="20180607 09:16:45.885"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:16:45.948" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.120000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:45.948" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:45.948" starttime="20180607 09:16:45.887"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:50.780" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.120000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:50.781" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01011P...</msg>
<status status="PASS" endtime="20180607 09:16:50.781" starttime="20180607 09:16:45.949"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:16:54.808" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.120000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:54.809" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:54.809" starttime="20180607 09:16:50.781"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.809" starttime="20180607 09:16:54.809"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.810" starttime="20180607 09:16:54.810"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:16:54.811" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:16:54.811" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:54.811" starttime="20180607 09:16:54.810"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:16:54.812" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE</msg>
<msg timestamp="20180607 09:16:54.813" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:16:54.813" starttime="20180607 09:16:54.811"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.813" starttime="20180607 09:16:54.813"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.813" starttime="20180607 09:16:54.813"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:54.839" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:54.839" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.150000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:54.839" starttime="20180607 09:16:54.814"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:54.839" starttime="20180607 09:16:54.814"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:54.839" starttime="20180607 09:16:54.813"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:16:54.852" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:16:54.852" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.160000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:16:54.852" starttime="20180607 09:16:54.840"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:54.852" starttime="20180607 09:16:54.840"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:54.852" starttime="20180607 09:16:54.839"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:54.853" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:54.853" starttime="20180607 09:16:54.852"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:16:54.853" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:16:54.853" starttime="20180607 09:16:54.853"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:54.853" starttime="20180607 09:16:45.864"></status>
</kw>
<status status="PASS" endtime="20180607 09:16:54.854" critical="yes" starttime="20180607 09:16:45.863"></status>
</test>
<test id="s1-s1-t13" name="TC01.011">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:16:54.861" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:16:54.861" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:54.861" starttime="20180607 09:16:54.860"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.862" starttime="20180607 09:16:54.861"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.862" starttime="20180607 09:16:54.862"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:16:54.863" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:16:54.863" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180607 09:16:54.863" starttime="20180607 09:16:54.862"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:16:54.864" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:16:54.865" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:16:54.865" starttime="20180607 09:16:54.864"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.873" starttime="20180607 09:16:54.865"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.882" starttime="20180607 09:16:54.874"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:16:54.887" starttime="20180607 09:16:54.883"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:16:54.945" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.220000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:16:54.946" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:16:54.946" starttime="20180607 09:16:54.888"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:00.777" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.230000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:00.778" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:17:00.778" starttime="20180607 09:16:54.946"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:06.812" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.240000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:06.812" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:06.812" starttime="20180607 09:17:00.778"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.813" starttime="20180607 09:17:06.812"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.813" starttime="20180607 09:17:06.813"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:17:06.814" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:17:06.814" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180607 09:17:06.815" starttime="20180607 09:17:06.813"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:17:06.816" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011</msg>
<msg timestamp="20180607 09:17:06.816" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:06.816" starttime="20180607 09:17:06.815"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.816" starttime="20180607 09:17:06.816"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.816" starttime="20180607 09:17:06.816"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:06.819" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.819" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.819" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.819" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.830" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:06.830" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.260000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:06.830" starttime="20180607 09:17:06.817"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:06.830" starttime="20180607 09:17:06.817"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01011&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:06.832" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.832" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.832" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.832" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.833" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.833" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:06.852" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:06.852" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.280000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:06.852" starttime="20180607 09:17:06.831"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:06.852" starttime="20180607 09:17:06.830"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:06.852" starttime="20180607 09:17:06.817"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.011/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:06.864" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:06.864" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.290000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:06.864" starttime="20180607 09:17:06.853"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:06.864" starttime="20180607 09:17:06.852"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:06.864" starttime="20180607 09:17:06.852"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:06.865" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:17:06.865" starttime="20180607 09:17:06.864"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:06.865" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:17:06.865" starttime="20180607 09:17:06.865"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:06.866" starttime="20180607 09:16:54.859"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:06.866" critical="yes" starttime="20180607 09:16:54.859"></status>
</test>
<test id="s1-s1-t14" name="TC01.012.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:17:06.873" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:17:06.873" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:06.873" starttime="20180607 09:17:06.872"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.874" starttime="20180607 09:17:06.873"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.874" starttime="20180607 09:17:06.874"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:17:06.875" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:17:06.875" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:06.875" starttime="20180607 09:17:06.874"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:17:06.876" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:17:06.877" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:06.877" starttime="20180607 09:17:06.875"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.885" starttime="20180607 09:17:06.877"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.893" starttime="20180607 09:17:06.886"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:06.897" starttime="20180607 09:17:06.894"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:17:06.976" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.360000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:06.976" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:06.976" starttime="20180607 09:17:06.897"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:11.159" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.370000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:11.160" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01012P...</msg>
<status status="PASS" endtime="20180607 09:17:11.160" starttime="20180607 09:17:06.977"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:15.790" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.370000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:15.791" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:15.791" starttime="20180607 09:17:11.160"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.791" starttime="20180607 09:17:15.791"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.792" starttime="20180607 09:17:15.791"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:17:15.793" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:17:15.793" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:15.793" starttime="20180607 09:17:15.792"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:17:15.794" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE</msg>
<msg timestamp="20180607 09:17:15.794" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:15.794" starttime="20180607 09:17:15.793"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.795" starttime="20180607 09:17:15.794"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.795" starttime="20180607 09:17:15.795"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:15.820" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:15.821" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.400000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:15.821" starttime="20180607 09:17:15.796"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:15.821" starttime="20180607 09:17:15.795"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:15.821" starttime="20180607 09:17:15.795"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:15.833" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:15.833" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.420000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:15.833" starttime="20180607 09:17:15.822"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:15.834" starttime="20180607 09:17:15.821"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:15.834" starttime="20180607 09:17:15.821"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:15.834" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:17:15.834" starttime="20180607 09:17:15.834"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:15.834" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:17:15.835" starttime="20180607 09:17:15.834"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:15.835" starttime="20180607 09:17:06.872"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:15.835" critical="yes" starttime="20180607 09:17:06.871"></status>
</test>
<test id="s1-s1-t15" name="TC01.012">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:17:15.842" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:17:15.842" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:15.842" starttime="20180607 09:17:15.841"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.843" starttime="20180607 09:17:15.843"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.843" starttime="20180607 09:17:15.843"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:17:15.844" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:17:15.844" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180607 09:17:15.844" starttime="20180607 09:17:15.843"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:17:15.845" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:17:15.846" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:15.846" starttime="20180607 09:17:15.845"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.854" starttime="20180607 09:17:15.846"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.860" starttime="20180607 09:17:15.855"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:15.863" starttime="20180607 09:17:15.861"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:17:15.929" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.490000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:15.930" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:15.930" starttime="20180607 09:17:15.863"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:21.312" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.500000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:21.313" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:17:21.313" starttime="20180607 09:17:15.930"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:24.790" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.510000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:24.790" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:24.790" starttime="20180607 09:17:21.314"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.791" starttime="20180607 09:17:24.791"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.791" starttime="20180607 09:17:24.791"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:17:24.793" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:17:24.793" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180607 09:17:24.793" starttime="20180607 09:17:24.792"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:17:24.794" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012</msg>
<msg timestamp="20180607 09:17:24.794" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:24.794" starttime="20180607 09:17:24.793"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.795" starttime="20180607 09:17:24.794"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.795" starttime="20180607 09:17:24.795"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:24.798" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.798" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.798" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.798" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.809" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:24.809" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.530000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:24.809" starttime="20180607 09:17:24.796"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:24.810" starttime="20180607 09:17:24.795"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01012&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:24.812" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.812" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.812" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.812" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.812" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.812" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:24.832" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:24.832" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.540000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:24.832" starttime="20180607 09:17:24.810"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:24.832" starttime="20180607 09:17:24.810"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:24.832" starttime="20180607 09:17:24.795"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.012/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:24.845" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:24.845" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.560000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:24.845" starttime="20180607 09:17:24.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:24.845" starttime="20180607 09:17:24.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:24.845" starttime="20180607 09:17:24.832"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:24.846" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:17:24.846" starttime="20180607 09:17:24.845"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:24.846" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:17:24.846" starttime="20180607 09:17:24.846"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:24.847" starttime="20180607 09:17:15.841"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:24.847" critical="yes" starttime="20180607 09:17:15.840"></status>
</test>
<test id="s1-s1-t16" name="TC01.013.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:17:24.854" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:17:24.854" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:24.854" starttime="20180607 09:17:24.853"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.855" starttime="20180607 09:17:24.855"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.855" starttime="20180607 09:17:24.855"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:17:24.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:17:24.856" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:24.856" starttime="20180607 09:17:24.855"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:17:24.857" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:17:24.858" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:24.858" starttime="20180607 09:17:24.856"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.866" starttime="20180607 09:17:24.858"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.878" starttime="20180607 09:17:24.867"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:24.880" starttime="20180607 09:17:24.879"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:17:24.993" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.650000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:24.994" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:24.994" starttime="20180607 09:17:24.881"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:31.185" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.660000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:31.186" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01013P...</msg>
<status status="PASS" endtime="20180607 09:17:31.186" starttime="20180607 09:17:24.994"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:36.819" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.660000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:36.819" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:36.820" starttime="20180607 09:17:31.186"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.820" starttime="20180607 09:17:36.820"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.820" starttime="20180607 09:17:36.820"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:17:36.822" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:17:36.822" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:36.822" starttime="20180607 09:17:36.821"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:17:36.823" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE</msg>
<msg timestamp="20180607 09:17:36.823" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:36.823" starttime="20180607 09:17:36.822"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.824" starttime="20180607 09:17:36.823"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.824" starttime="20180607 09:17:36.824"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:36.850" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:36.850" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.690000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:36.850" starttime="20180607 09:17:36.825"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:36.850" starttime="20180607 09:17:36.824"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:36.850" starttime="20180607 09:17:36.824"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:36.862" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:36.862" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.700000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:36.862" starttime="20180607 09:17:36.851"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:36.862" starttime="20180607 09:17:36.851"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:36.862" starttime="20180607 09:17:36.850"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:36.863" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:17:36.863" starttime="20180607 09:17:36.863"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:36.863" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:17:36.863" starttime="20180607 09:17:36.863"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:36.864" starttime="20180607 09:17:24.852"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:36.864" critical="yes" starttime="20180607 09:17:24.852"></status>
</test>
<test id="s1-s1-t17" name="TC01.013">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResModifyNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:17:36.871" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:17:36.871" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRQ1-EXPmodifyReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:36.871" starttime="20180607 09:17:36.870"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.872" starttime="20180607 09:17:36.871"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.872" starttime="20180607 09:17:36.872"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:17:36.873" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:17:36.873" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-BWcancelReservation.xml | /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking...</msg>
<status status="PASS" endtime="20180607 09:17:36.873" starttime="20180607 09:17:36.872"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:17:36.874" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:17:36.875" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:36.875" starttime="20180607 09:17:36.873"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.883" starttime="20180607 09:17:36.875"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.890" starttime="20180607 09:17:36.884"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:36.897" starttime="20180607 09:17:36.891"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:17:36.984" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.800000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:36.984" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:36.984" starttime="20180607 09:17:36.897"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:41.162" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.800000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:41.162" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:17:41.162" starttime="20180607 09:17:36.985"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:45.792" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.800000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:45.792" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:45.792" starttime="20180607 09:17:41.163"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.793" starttime="20180607 09:17:45.793"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.793" starttime="20180607 09:17:45.793"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:17:45.794" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:17:45.795" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml', u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedi...</msg>
<status status="PASS" endtime="20180607 09:17:45.795" starttime="20180607 09:17:45.793"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:17:45.796" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013</msg>
<msg timestamp="20180607 09:17:45.796" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:45.796" starttime="20180607 09:17:45.795"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.796" starttime="20180607 09:17:45.796"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.797" starttime="20180607 09:17:45.796"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:45.799" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.799" level="INFO">actural xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.799" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.799" level="INFO">expected xml filter error:cannot find './/x:OTA_HotelResNotifRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.810" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:45.810" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.820000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:45.810" starttime="20180607 09:17:45.797"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:45.810" starttime="20180607 09:17:45.797"></status>
</kw>
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01013&quot; P..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ2-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:45.812" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.812" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.812" level="INFO">actural xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.812" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.813" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.813" level="INFO">expected xml filter error:cannot find './/x:OTA_CancelRQ' element or attribute</msg>
<msg timestamp="20180607 09:17:45.832" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:45.832" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.850000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:45.833" starttime="20180607 09:17:45.811"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:45.833" starttime="20180607 09:17:45.810"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:45.833" starttime="20180607 09:17:45.797"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.013/expected-HttpRQ1-EXPmodifyReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:45.845" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:45.845" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/2.860000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:45.845" starttime="20180607 09:17:45.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:45.845" starttime="20180607 09:17:45.833"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:45.845" starttime="20180607 09:17:45.833"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:45.846" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:17:45.846" starttime="20180607 09:17:45.845"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:45.846" level="INFO">Length is 2</msg>
<status status="PASS" endtime="20180607 09:17:45.846" starttime="20180607 09:17:45.846"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:45.847" starttime="20180607 09:17:36.869"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:45.847" critical="yes" starttime="20180607 09:17:36.869"></status>
</test>
<test id="s1-s1-t18" name="TC01.031.PRE">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_HotelResNotifRS[@TimeStamp]','.//x:HotelReservationID[@ResID_Date]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_HotelResNotifRQ[@TimeStamp]','.//x:OTA_HotelResNotifRQ[@TransactionIdentifier]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:17:45.856" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:17:45.857" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRQ1-EXPmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:45.857" starttime="20180607 09:17:45.854"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.857" starttime="20180607 09:17:45.857"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.857" starttime="20180607 09:17:45.857"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:17:45.858" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:17:45.859" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS2-BWmakeReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:45.859" starttime="20180607 09:17:45.857"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:17:45.860" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:17:45.860" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:45.860" starttime="20180607 09:17:45.859"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.869" starttime="20180607 09:17:45.860"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.875" starttime="20180607 09:17:45.870"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:45.878" starttime="20180607 09:17:45.876"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:17:45.984" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.960000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:45.984" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:45.985" starttime="20180607 09:17:45.879"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:51.169" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.970000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:51.170" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" EchoToken="REQ01031P...</msg>
<status status="PASS" endtime="20180607 09:17:51.170" starttime="20180607 09:17:45.985"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:17:54.796" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/2.970000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:54.796" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:54.796" starttime="20180607 09:17:51.170"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.797" starttime="20180607 09:17:54.796"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.797" starttime="20180607 09:17:54.797"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:17:54.798" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:17:54.798" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:54.798" starttime="20180607 09:17:54.797"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:17:54.799" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE</msg>
<msg timestamp="20180607 09:17:54.800" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:17:54.800" starttime="20180607 09:17:54.798"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.800" starttime="20180607 09:17:54.800"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.800" starttime="20180607 09:17:54.800"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_HotelResNotifRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; EchoToken=&quot;REQ01031PRE..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-BWmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:54.825" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:54.825" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.000000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:54.825" starttime="20180607 09:17:54.801"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:54.825" starttime="20180607 09:17:54.801"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:54.825" starttime="20180607 09:17:54.800"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031.PRE/expected-HttpRQ1-EXPmakeReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:17:54.838" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:17:54.838" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.010000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:17:54.838" starttime="20180607 09:17:54.826"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:54.838" starttime="20180607 09:17:54.826"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:54.838" starttime="20180607 09:17:54.825"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:54.838" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:17:54.839" starttime="20180607 09:17:54.838"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:17:54.839" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:17:54.839" starttime="20180607 09:17:54.839"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:54.839" starttime="20180607 09:17:45.853"></status>
</kw>
<status status="PASS" endtime="20180607 09:17:54.839" critical="yes" starttime="20180607 09:17:45.853"></status>
</test>
<test id="s1-s1-t19" name="TC01.031">
<kw name="booking" library="inner">
<arguments>
<arg>http://172.27.0.63:80/expedia-endpoint/soap</arg>
<arg>httpChannelRQ_filters=['.//x:OTA_CancelRS[@TimeStamp]']</arg>
<arg>httpChannelRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
<arg>httpProviderRQ_filters=['.//x:OTA_CancelRQ[@TimeStamp]','.//x:OTA_CancelRQ[@TransactionIdentifier]','.//x:OTA_CancelRQ[@EchoToken]']</arg>
<arg>httpProviderRQ_namesp={'x':'http://www.opentravel.org/OTA/2003/05'}</arg>
</arguments>
<kw name="Test HTTP Client Requests" library="Doraemon">
<doc>Return List</doc>
<assign>
<var>@{HttpRQ}</var>
</assign>
<msg timestamp="20180607 09:17:54.847" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:17:54.847" level="INFO">@{HttpRQ} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRQ1-EXPcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:54.847" starttime="20180607 09:17:54.846"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpProviderRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.847" starttime="20180607 09:17:54.847"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{HttpChannelRS}=</arg>
<arg>Test HTTP Server Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.848" starttime="20180607 09:17:54.847"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-BW.*.xml</arg>
</arguments>
<assign>
<var>@{HttpProviderRS}</var>
</assign>
<msg timestamp="20180607 09:17:54.849" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:17:54.849" level="INFO">@{HttpProviderRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-BWcancelReservation.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:54.849" starttime="20180607 09:17:54.848"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>HttpRS.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>@{HttpChannelRS}</var>
</assign>
<msg timestamp="20180607 09:17:54.850" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:17:54.850" level="INFO">@{HttpChannelRS} = [ /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/HttpRS1-EXP.xml ]</msg>
<status status="PASS" endtime="20180607 09:17:54.850" starttime="20180607 09:17:54.849"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
<arg>200</arg>
<arg>@{HttpProviderRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.859" starttime="20180607 09:17:54.850"></status>
</kw>
<kw name="Run Http Server" library="Doraemon">
<doc>模拟一个HTTP Server，使用这个方法后，可以通过"Get Http Server Request"来获取Server的Request</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
<arg>200</arg>
<arg>@{HttpChannelRS}</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.877" starttime="20180607 09:17:54.860"></status>
</kw>
<kw name="Run Http Client" library="Doraemon">
<doc>After use this method ,please use "Get Http Client Responses" to get responses</doc>
<arguments>
<arg>${Http_URL}</arg>
<arg>POST</arg>
<arg>@{HttpRQ}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:17:54.880" starttime="20180607 09:17:54.878"></status>
</kw>
<kw name="Get Http Client Responses" library="Doraemon">
<doc>Return response list</doc>
<assign>
<var>@{httpRSActual}</var>
</assign>
<msg timestamp="20180607 09:17:54.915" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:17:54.915" level="INFO">@{httpRSActual} = [ &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:17:54.915" starttime="20180607 09:17:54.880"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Provider}</arg>
</arguments>
<assign>
<var>${httpProviderRQActual}</var>
</assign>
<msg timestamp="20180607 09:18:00.751" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.060000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:18:00.751" level="INFO">${httpProviderRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns="http://www.opentravel.org/OTA/2003/05" CancelType="Cancel" EchoTok...</msg>
<status status="PASS" endtime="20180607 09:18:00.751" starttime="20180607 09:17:54.916"></status>
</kw>
<kw name="Get Http Server Request" library="Doraemon">
<doc>get http server reuqest</doc>
<arguments>
<arg>${Http_Port_Channel}</arg>
</arguments>
<assign>
<var>${httpChannelRQActual}</var>
</assign>
<msg timestamp="20180607 09:18:06.786" html="yes" level="INFO">please click &lt;a target="_blank" href="cache/3.070000.txt"&gt;Cache file&lt;/a&gt; to check details</msg>
<msg timestamp="20180607 09:18:06.786" level="INFO">${httpChannelRQActual} = ['&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns="http://www.newtrade.com/expedia/R14/header" Name="ExpediaDirectConnect" Version="4.0"...</msg>
<status status="PASS" endtime="20180607 09:18:06.786" starttime="20180607 09:18:00.752"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpProviderRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:18:06.787" starttime="20180607 09:18:06.786"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${expected_HttpChannelRQ}=</arg>
<arg>Test HTTP Server Expected Requests</arg>
</arguments>
<status status="PASS" endtime="20180607 09:18:06.787" starttime="20180607 09:18:06.787"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-BW.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpProviderRQ}</var>
</assign>
<msg timestamp="20180607 09:18:06.788" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:18:06.788" level="INFO">${expected_HttpProviderRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:18:06.788" starttime="20180607 09:18:06.787"></status>
</kw>
<kw name="Test Data" library="Doraemon">
<doc>get test folder or file</doc>
<arguments>
<arg>expected-HttpRQ.*-EXP.*.xml</arg>
</arguments>
<assign>
<var>${expected_HttpChannelRQ}</var>
</assign>
<msg timestamp="20180607 09:18:06.789" level="INFO">/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031</msg>
<msg timestamp="20180607 09:18:06.790" level="INFO">${expected_HttpChannelRQ} = [u'/usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml']</msg>
<status status="PASS" endtime="20180607 09:18:06.790" starttime="20180607 09:18:06.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{expected_httpRS}=</arg>
<arg>Test HTTP Client Expected Responses</arg>
</arguments>
<status status="PASS" endtime="20180607 09:18:06.790" starttime="20180607 09:18:06.790"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Xml Compare</arg>
<arg>@{httpRSActual}[0]</arg>
<arg>@{expected_httpRS}[0]</arg>
</arguments>
<status status="PASS" endtime="20180607 09:18:06.790" starttime="20180607 09:18:06.790"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpProviderRQActual} | ${expected_HttpProviderRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;OTA_CancelRQ xmlns=&quot;http://www.opentravel.org/OTA/2003/05&quot; CancelType=&quot;Cancel&quot; EchoToken..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-BWcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpProviderRQ_filters}</arg>
<arg>namespaces=${httpProviderRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:18:06.804" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:18:06.804" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.090000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:18:06.804" starttime="20180607 09:18:06.791"></status>
</kw>
<status status="PASS" endtime="20180607 09:18:06.804" starttime="20180607 09:18:06.791"></status>
</kw>
<status status="PASS" endtime="20180607 09:18:06.804" starttime="20180607 09:18:06.791"></status>
</kw>
<kw type="for" name="${request} | ${expected_request} IN ZIP [ ${httpChannelRQActual} | ${expected_HttpChannelRQ} ]">
<kw type="foritem" name="${request} = &lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header&gt;&lt;Interface xmlns=&quot;http://www.newtrade.com/expedia/R14/header&quot; Name=&quot;ExpediaDirectConnect&quot; Version=&quot;4.0&quot;&gt;&lt;..., ${expected_request} = /usr/local/data/baymax_node/project/test_automation/bw-exp/Expedia-BW-Booking/TC01.031/expected-HttpRQ1-EXPcancelReservation.xml">
<kw name="Xml Compare" library="Doraemon">
<doc>对比两个XML文件，默认会把XML重复的节点排序</doc>
<arguments>
<arg>${request}</arg>
<arg>${expected_request}</arg>
<arg>tagfilters=${httpChannelRQ_filters}</arg>
<arg>namespaces=${httpChannelRQ_namesp}</arg>
</arguments>
<msg timestamp="20180607 09:18:06.817" level="INFO">XML Compare :File Match</msg>
<msg timestamp="20180607 09:18:06.817" html="yes" level="INFO">please click &lt;a target="_blank" href="compare/3.100000.html"&gt;Compare File&lt;/a&gt; to check details</msg>
<status status="PASS" endtime="20180607 09:18:06.817" starttime="20180607 09:18:06.805"></status>
</kw>
<status status="PASS" endtime="20180607 09:18:06.817" starttime="20180607 09:18:06.805"></status>
</kw>
<status status="PASS" endtime="20180607 09:18:06.817" starttime="20180607 09:18:06.804"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:18:06.818" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:18:06.818" starttime="20180607 09:18:06.817"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${httpProviderRQActual}</arg>
</arguments>
<msg timestamp="20180607 09:18:06.818" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20180607 09:18:06.818" starttime="20180607 09:18:06.818"></status>
</kw>
<status status="PASS" endtime="20180607 09:18:06.819" starttime="20180607 09:17:54.845"></status>
</kw>
<status status="PASS" endtime="20180607 09:18:06.819" critical="yes" starttime="20180607 09:17:54.845"></status>
</test>
<status status="PASS" endtime="20180607 09:18:06.825" starttime="20180607 09:14:49.103"></status>
</suite>
<status status="PASS" endtime="20180607 09:18:06.832" starttime="20180607 09:14:48.764"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="19">Critical Tests</stat>
<stat fail="0" pass="19">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="Bw-Exp" pass="19">Bw-Exp</stat>
<stat fail="0" id="s1-s1" name="Expedia-BW-Booking" pass="19">Bw-Exp.Expedia-BW-Booking</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
